/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Entire API Collection
 * All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"
 *
 * The version of the OpenAPI document: V3.0.4
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { GetPackageDescriptionsResult, PackageDescription, Result } from '../models/index';

export interface DeleteAASXByPackageIdRequest {
    packageId: string;
}

export interface GetAASXByPackageIdRequest {
    packageId: string;
}

export interface GetAllAASXPackageIdsRequest {
    aasId?: string;
    limit?: number;
    cursor?: string;
}

export interface PostAASXPackageRequest {
    aasIds?: Array<string>;
    file?: Blob;
    fileName?: string;
}

export interface PutAASXByPackageIdRequest {
    packageId: string;
    aasIds?: Array<string>;
    file?: Blob;
    fileName?: string;
}

/**
 * AASXFileServerAPIApi - interface
 *
 * @export
 * @interface AASXFileServerAPIApiInterface
 */
export interface AASXFileServerAPIApiInterface {
    /**
     *
     * @summary Deletes a specific AASX package from the server
     * @param {string} packageId The package Id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AASXFileServerAPIApiInterface
     */
    deleteAASXByPackageIdRaw(
        requestParameters: DeleteAASXByPackageIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a specific AASX package from the server
     */
    deleteAASXByPackageId(
        requestParameters: DeleteAASXByPackageIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Returns a specific AASX package from the server
     * @param {string} packageId The package Id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AASXFileServerAPIApiInterface
     */
    getAASXByPackageIdRaw(
        requestParameters: GetAASXByPackageIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Returns a specific AASX package from the server
     */
    getAASXByPackageId(
        requestParameters: GetAASXByPackageIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Blob>;

    /**
     *
     * @summary Returns a list of available AASX packages at the server
     * @param {string} [aasId] The Asset Administration Shellâ€™s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AASXFileServerAPIApiInterface
     */
    getAllAASXPackageIdsRaw(
        requestParameters: GetAllAASXPackageIdsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetPackageDescriptionsResult>>;

    /**
     * Returns a list of available AASX packages at the server
     */
    getAllAASXPackageIds(
        requestParameters: GetAllAASXPackageIdsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetPackageDescriptionsResult>;

    /**
     *
     * @summary Stores the AASX package at the server
     * @param {Array<string>} [aasIds]
     * @param {Blob} [file]
     * @param {string} [fileName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AASXFileServerAPIApiInterface
     */
    postAASXPackageRaw(
        requestParameters: PostAASXPackageRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<PackageDescription>>;

    /**
     * Stores the AASX package at the server
     */
    postAASXPackage(
        requestParameters: PostAASXPackageRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<PackageDescription>;

    /**
     *
     * @summary Updates the AASX package at the server
     * @param {string} packageId The package Id (UTF8-BASE64-URL-encoded)
     * @param {Array<string>} [aasIds]
     * @param {Blob} [file]
     * @param {string} [fileName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AASXFileServerAPIApiInterface
     */
    putAASXByPackageIdRaw(
        requestParameters: PutAASXByPackageIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the AASX package at the server
     */
    putAASXByPackageId(
        requestParameters: PutAASXByPackageIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;
}

/**
 *
 */
export class AASXFileServerAPIApi extends runtime.BaseAPI implements AASXFileServerAPIApiInterface {
    /**
     * Deletes a specific AASX package from the server
     */
    async deleteAASXByPackageIdRaw(
        requestParameters: DeleteAASXByPackageIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['packageId'] == null) {
            throw new runtime.RequiredError(
                'packageId',
                'Required parameter "packageId" was null or undefined when calling deleteAASXByPackageId().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/packages/{packageId}`.replace(
                    `{${'packageId'}}`,
                    encodeURIComponent(String(requestParameters['packageId'])),
                ),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a specific AASX package from the server
     */
    async deleteAASXByPackageId(
        requestParameters: DeleteAASXByPackageIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.deleteAASXByPackageIdRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a specific AASX package from the server
     */
    async getAASXByPackageIdRaw(
        requestParameters: GetAASXByPackageIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['packageId'] == null) {
            throw new runtime.RequiredError(
                'packageId',
                'Required parameter "packageId" was null or undefined when calling getAASXByPackageId().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/packages/{packageId}`.replace(
                    `{${'packageId'}}`,
                    encodeURIComponent(String(requestParameters['packageId'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Returns a specific AASX package from the server
     */
    async getAASXByPackageId(
        requestParameters: GetAASXByPackageIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Blob> {
        const response = await this.getAASXByPackageIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of available AASX packages at the server
     */
    async getAllAASXPackageIdsRaw(
        requestParameters: GetAllAASXPackageIdsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetPackageDescriptionsResult>> {
        const queryParameters: any = {};

        if (requestParameters['aasId'] != null) {
            queryParameters['aasId'] = requestParameters['aasId'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/packages`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of available AASX packages at the server
     */
    async getAllAASXPackageIds(
        requestParameters: GetAllAASXPackageIdsRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetPackageDescriptionsResult> {
        const response = await this.getAllAASXPackageIdsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stores the AASX package at the server
     */
    async postAASXPackageRaw(
        requestParameters: PostAASXPackageRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<PackageDescription>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['aasIds'] != null) {
            formParams.append('aasIds', requestParameters['aasIds']!.join(runtime.COLLECTION_FORMATS['csv']));
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('fileName', requestParameters['fileName'] as any);
        }

        const response = await this.request(
            {
                path: `/packages`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Stores the AASX package at the server
     */
    async postAASXPackage(
        requestParameters: PostAASXPackageRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<PackageDescription> {
        const response = await this.postAASXPackageRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the AASX package at the server
     */
    async putAASXByPackageIdRaw(
        requestParameters: PutAASXByPackageIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['packageId'] == null) {
            throw new runtime.RequiredError(
                'packageId',
                'Required parameter "packageId" was null or undefined when calling putAASXByPackageId().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['aasIds'] != null) {
            formParams.append('aasIds', requestParameters['aasIds']!.join(runtime.COLLECTION_FORMATS['csv']));
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('fileName', requestParameters['fileName'] as any);
        }

        const response = await this.request(
            {
                path: `/packages/{packageId}`.replace(
                    `{${'packageId'}}`,
                    encodeURIComponent(String(requestParameters['packageId'])),
                ),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the AASX package at the server
     */
    async putAASXByPackageId(
        requestParameters: PutAASXByPackageIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.putAASXByPackageIdRaw(requestParameters, initOverrides);
    }
}
