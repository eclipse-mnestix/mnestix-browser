/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Entire API Collection
 * All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"
 *
 * The version of the OpenAPI document: V3.0.4
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
    AssetAdministrationShell,
    AssetInformation,
    BaseOperationResult,
    GetPathItemsResult,
    GetReferencesResult,
    GetSubmodelElementsMetadataResult,
    GetSubmodelElementsResult,
    GetSubmodelElementsValueResult,
    OperationRequest,
    OperationRequestValueOnly,
    OperationResult,
    OperationResultValueOnly,
    Reference,
    Result,
    Submodel,
    SubmodelElement,
    SubmodelElementMetadata,
    SubmodelElementValue,
    SubmodelMetadata,
} from '../models/index';

export interface DeleteFileByPathAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
}

export interface DeleteSubmodelByIdAASRequest {
    submodelIdentifier: string;
}

export interface DeleteSubmodelElementByPathAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
}

export interface DeleteSubmodelReferenceByIdRequest {
    submodelIdentifier: string;
}

export interface GetAllSubmodelElementsAASRequest {
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsAASLevelEnum;
    extent?: GetAllSubmodelElementsAASExtentEnum;
}

export interface GetAllSubmodelElementsMetadataAASRequest {
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
}

export interface GetAllSubmodelElementsPathAASRequest {
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsPathAASLevelEnum;
}

export interface GetAllSubmodelElementsReferenceAASRequest {
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsReferenceAASLevelEnum;
}

export interface GetAllSubmodelElementsValueOnlyAASRequest {
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsValueOnlyAASLevelEnum;
    extent?: GetAllSubmodelElementsValueOnlyAASExtentEnum;
}

export interface GetAllSubmodelReferencesRequest {
    limit?: number;
    cursor?: string;
}

export interface GetFileByPathAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
}

export interface GetOperationAsyncResultAASRequest {
    submodelIdentifier: string;
    aasIdentifier: string;
    idShortPath: string;
    handleId: string;
}

export interface GetOperationAsyncResultValueOnlyAASRequest {
    submodelIdentifier: string;
    aasIdentifier: string;
    idShortPath: string;
    handleId: string;
}

export interface GetOperationAsyncStatusAASRequest {
    submodelIdentifier: string;
    aasIdentifier: string;
    idShortPath: string;
    handleId: string;
}

export interface GetSubmodelAASRequest {
    submodelIdentifier: string;
    level?: GetSubmodelAASLevelEnum;
    extent?: GetSubmodelAASExtentEnum;
}

export interface GetSubmodelElementByPathAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
    level?: GetSubmodelElementByPathAASLevelEnum;
    extent?: GetSubmodelElementByPathAASExtentEnum;
}

export interface GetSubmodelElementByPathMetadataAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
}

export interface GetSubmodelElementByPathPathAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
    level?: GetSubmodelElementByPathPathAASLevelEnum;
}

export interface GetSubmodelElementByPathReferenceAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
}

export interface GetSubmodelElementByPathValueOnlyAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
    level?: GetSubmodelElementByPathValueOnlyAASLevelEnum;
}

export interface GetSubmodelMetadataAASRequest {
    submodelIdentifier: string;
}

export interface GetSubmodelMetadataReferenceAASRequest {
    submodelIdentifier: string;
    level?: GetSubmodelMetadataReferenceAASLevelEnum;
}

export interface GetSubmodelPathAASRequest {
    submodelIdentifier: string;
    level?: GetSubmodelPathAASLevelEnum;
}

export interface GetSubmodelValueOnlyAASRequest {
    submodelIdentifier: string;
    level?: GetSubmodelValueOnlyAASLevelEnum;
    extent?: GetSubmodelValueOnlyAASExtentEnum;
}

export interface InvokeOperationAsyncAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
    operationRequest: OperationRequest;
}

export interface InvokeOperationAsyncValueOnlyAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
    operationRequestValueOnly: OperationRequestValueOnly;
}

export interface InvokeOperationSyncAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
    operationRequest: OperationRequest;
}

export interface InvokeOperationSyncValueOnlyAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
    operationRequestValueOnly: OperationRequestValueOnly;
}

export interface PatchSubmodelAASRequest {
    submodelIdentifier: string;
    submodel: Submodel;
    level?: PatchSubmodelAASLevelEnum;
}

export interface PatchSubmodelElementValueByPathAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
    submodelElement: SubmodelElement;
    level?: PatchSubmodelElementValueByPathAASLevelEnum;
}

export interface PatchSubmodelElementValueByPathMetadataAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
    submodelElementMetadata: SubmodelElementMetadata;
}

export interface PatchSubmodelElementValueByPathValueOnlyAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
    submodelElementValue: SubmodelElementValue;
    level?: PatchSubmodelElementValueByPathValueOnlyAASLevelEnum;
}

export interface PatchSubmodelMetadataAASRequest {
    submodelIdentifier: string;
    submodelMetadata: SubmodelMetadata;
}

export interface PatchSubmodelValueOnlyAASRequest {
    submodelIdentifier: string;
    body: object;
    level?: PatchSubmodelValueOnlyAASLevelEnum;
}

export interface PostSubmodelElementAASRequest {
    submodelIdentifier: string;
    submodelElement: SubmodelElement;
}

export interface PostSubmodelElementByPathAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
    submodelElement: SubmodelElement;
}

export interface PostSubmodelReferenceRequest {
    reference: Reference;
}

export interface PutAssetAdministrationShellRequest {
    assetAdministrationShell: AssetAdministrationShell;
}

export interface PutAssetInformationRequest {
    assetInformation: AssetInformation;
}

export interface PutFileByPathAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
    fileName?: string;
    file?: Blob;
}

export interface PutSubmodelAASRequest {
    submodelIdentifier: string;
    submodel: Submodel;
    level?: PutSubmodelAASLevelEnum;
}

export interface PutSubmodelElementByPathAASRequest {
    submodelIdentifier: string;
    idShortPath: string;
    submodelElement: SubmodelElement;
}

export interface PutThumbnailRequest {
    fileName?: string;
    file?: Blob;
}

/**
 * AssetAdministrationShellAPIApi - interface
 *
 * @export
 * @interface AssetAdministrationShellAPIApiInterface
 */
export interface AssetAdministrationShellAPIApiInterface {
    /**
     *
     * @summary Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    deleteFileByPathAASRaw(
        requestParameters: DeleteFileByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     */
    deleteFileByPathAAS(
        requestParameters: DeleteFileByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Deletes the submodel from the Asset Administration Shell.
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    deleteSubmodelByIdAASRaw(
        requestParameters: DeleteSubmodelByIdAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes the submodel from the Asset Administration Shell.
     */
    deleteSubmodelByIdAAS(
        requestParameters: DeleteSubmodelByIdAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Deletes a submodel element at a specified path within the submodel elements hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    deleteSubmodelElementByPathAASRaw(
        requestParameters: DeleteSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a submodel element at a specified path within the submodel elements hierarchy
     */
    deleteSubmodelElementByPathAAS(
        requestParameters: DeleteSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    deleteSubmodelReferenceByIdRaw(
        requestParameters: DeleteSubmodelReferenceByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
     */
    deleteSubmodelReferenceById(
        requestParameters: DeleteSubmodelReferenceByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    deleteThumbnailRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;

    /**
     */
    deleteThumbnail(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;

    /**
     *
     * @summary Returns all submodel elements including their hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getAllSubmodelElementsAASRaw(
        requestParameters: GetAllSubmodelElementsAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsResult>>;

    /**
     * Returns all submodel elements including their hierarchy
     */
    getAllSubmodelElementsAAS(
        requestParameters: GetAllSubmodelElementsAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsResult>;

    /**
     *
     * @summary Returns all submodel elements including their hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getAllSubmodelElementsMetadataAASRaw(
        requestParameters: GetAllSubmodelElementsMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsMetadataResult>>;

    /**
     * Returns all submodel elements including their hierarchy
     */
    getAllSubmodelElementsMetadataAAS(
        requestParameters: GetAllSubmodelElementsMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsMetadataResult>;

    /**
     *
     * @summary Returns all submodel elements including their hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getAllSubmodelElementsPathAASRaw(
        requestParameters: GetAllSubmodelElementsPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetPathItemsResult>>;

    /**
     * Returns all submodel elements including their hierarchy
     */
    getAllSubmodelElementsPathAAS(
        requestParameters: GetAllSubmodelElementsPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetPathItemsResult>;

    /**
     *
     * @summary Returns all submodel elements as a list of References
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getAllSubmodelElementsReferenceAASRaw(
        requestParameters: GetAllSubmodelElementsReferenceAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetReferencesResult>>;

    /**
     * Returns all submodel elements as a list of References
     */
    getAllSubmodelElementsReferenceAAS(
        requestParameters: GetAllSubmodelElementsReferenceAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetReferencesResult>;

    /**
     *
     * @summary Returns all submodel elements including their hierarchy in the ValueOnly representation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getAllSubmodelElementsValueOnlyAASRaw(
        requestParameters: GetAllSubmodelElementsValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsValueResult>>;

    /**
     * Returns all submodel elements including their hierarchy in the ValueOnly representation
     */
    getAllSubmodelElementsValueOnlyAAS(
        requestParameters: GetAllSubmodelElementsValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsValueResult>;

    /**
     *
     * @summary Returns all submodel references
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getAllSubmodelReferencesRaw(
        requestParameters: GetAllSubmodelReferencesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetReferencesResult>>;

    /**
     * Returns all submodel references
     */
    getAllSubmodelReferences(
        requestParameters: GetAllSubmodelReferencesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetReferencesResult>;

    /**
     *
     * @summary Returns a specific Asset Administration Shell
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getAssetAdministrationShellRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<AssetAdministrationShell>>;

    /**
     * Returns a specific Asset Administration Shell
     */
    getAssetAdministrationShell(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<AssetAdministrationShell>;

    /**
     *
     * @summary Returns a specific Asset Administration Shell as a Reference
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getAssetAdministrationShellReferenceRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>>;

    /**
     * Returns a specific Asset Administration Shell as a Reference
     */
    getAssetAdministrationShellReference(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference>;

    /**
     *
     * @summary Returns the Asset Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getAssetInformationRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<AssetInformation>>;

    /**
     * Returns the Asset Information
     */
    getAssetInformation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetInformation>;

    /**
     *
     * @summary Downloads file content from a specific submodel element from the Submodel at a specified path
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getFileByPathAASRaw(
        requestParameters: GetFileByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Downloads file content from a specific submodel element from the Submodel at a specified path
     */
    getFileByPathAAS(
        requestParameters: GetFileByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Blob>;

    /**
     *
     * @summary Returns the Operation result of an asynchronous invoked Operation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getOperationAsyncResultAASRaw(
        requestParameters: GetOperationAsyncResultAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResult>>;

    /**
     * Returns the Operation result of an asynchronous invoked Operation
     */
    getOperationAsyncResultAAS(
        requestParameters: GetOperationAsyncResultAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResult>;

    /**
     *
     * @summary Returns the value of the Operation result of an asynchronous invoked Operation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getOperationAsyncResultValueOnlyAASRaw(
        requestParameters: GetOperationAsyncResultValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResultValueOnly>>;

    /**
     * Returns the value of the Operation result of an asynchronous invoked Operation
     */
    getOperationAsyncResultValueOnlyAAS(
        requestParameters: GetOperationAsyncResultValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResultValueOnly>;

    /**
     *
     * @summary Returns the Operation status of an asynchronous invoked Operation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getOperationAsyncStatusAASRaw(
        requestParameters: GetOperationAsyncStatusAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<BaseOperationResult>>;

    /**
     * Returns the Operation status of an asynchronous invoked Operation
     */
    getOperationAsyncStatusAAS(
        requestParameters: GetOperationAsyncStatusAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<BaseOperationResult>;

    /**
     *
     * @summary Returns the Submodel
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getSubmodelAASRaw(
        requestParameters: GetSubmodelAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Submodel>>;

    /**
     * Returns the Submodel
     */
    getSubmodelAAS(
        requestParameters: GetSubmodelAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Submodel>;

    /**
     *
     * @summary Returns a specific submodel element from the Submodel at a specified path
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getSubmodelElementByPathAASRaw(
        requestParameters: GetSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>>;

    /**
     * Returns a specific submodel element from the Submodel at a specified path
     */
    getSubmodelElementByPathAAS(
        requestParameters: GetSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement>;

    /**
     *
     * @summary Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getSubmodelElementByPathMetadataAASRaw(
        requestParameters: GetSubmodelElementByPathMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElementMetadata>>;

    /**
     * Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
     */
    getSubmodelElementByPathMetadataAAS(
        requestParameters: GetSubmodelElementByPathMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElementMetadata>;

    /**
     *
     * @summary Returns a specific submodel element from the Submodel at a specified path in the Path notation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getSubmodelElementByPathPathAASRaw(
        requestParameters: GetSubmodelElementByPathPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the Path notation
     */
    getSubmodelElementByPathPathAAS(
        requestParameters: GetSubmodelElementByPathPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<string>>;

    /**
     *
     * @summary Returns the Reference of a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getSubmodelElementByPathReferenceAASRaw(
        requestParameters: GetSubmodelElementByPathReferenceAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>>;

    /**
     * Returns the Reference of a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     */
    getSubmodelElementByPathReferenceAAS(
        requestParameters: GetSubmodelElementByPathReferenceAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference>;

    /**
     *
     * @summary Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getSubmodelElementByPathValueOnlyAASRaw(
        requestParameters: GetSubmodelElementByPathValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElementValue>>;

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     */
    getSubmodelElementByPathValueOnlyAAS(
        requestParameters: GetSubmodelElementByPathValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElementValue>;

    /**
     *
     * @summary Returns the Submodel\'s metadata elements
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getSubmodelMetadataAASRaw(
        requestParameters: GetSubmodelMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelMetadata>>;

    /**
     * Returns the Submodel\'s metadata elements
     */
    getSubmodelMetadataAAS(
        requestParameters: GetSubmodelMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelMetadata>;

    /**
     *
     * @summary Returns the Submodel as a Reference
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getSubmodelMetadataReferenceAASRaw(
        requestParameters: GetSubmodelMetadataReferenceAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>>;

    /**
     * Returns the Submodel as a Reference
     */
    getSubmodelMetadataReferenceAAS(
        requestParameters: GetSubmodelMetadataReferenceAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference>;

    /**
     *
     * @summary Returns the Submodel\'s metadata elements
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getSubmodelPathAASRaw(
        requestParameters: GetSubmodelPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Returns the Submodel\'s metadata elements
     */
    getSubmodelPathAAS(
        requestParameters: GetSubmodelPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<string>>;

    /**
     *
     * @summary Returns the Submodel\'s ValueOnly representation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getSubmodelValueOnlyAASRaw(
        requestParameters: GetSubmodelValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>>;

    /**
     * Returns the Submodel\'s ValueOnly representation
     */
    getSubmodelValueOnlyAAS(
        requestParameters: GetSubmodelValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object>;

    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    getThumbnailRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;

    /**
     */
    getThumbnail(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;

    /**
     *
     * @summary Synchronously invokes an Operation at a specified path
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {OperationRequest} operationRequest Operation request object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    invokeOperationAsyncAASRaw(
        requestParameters: InvokeOperationAsyncAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Synchronously invokes an Operation at a specified path
     */
    invokeOperationAsyncAAS(
        requestParameters: InvokeOperationAsyncAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Asynchronously invokes an Operation at a specified path
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {OperationRequestValueOnly} operationRequestValueOnly Operation request object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    invokeOperationAsyncValueOnlyAASRaw(
        requestParameters: InvokeOperationAsyncValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    invokeOperationAsyncValueOnlyAAS(
        requestParameters: InvokeOperationAsyncValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Synchronously invokes an Operation at a specified path
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {OperationRequest} operationRequest Operation request object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    invokeOperationSyncAASRaw(
        requestParameters: InvokeOperationSyncAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResult>>;

    /**
     * Synchronously invokes an Operation at a specified path
     */
    invokeOperationSyncAAS(
        requestParameters: InvokeOperationSyncAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResult>;

    /**
     *
     * @summary Synchronously invokes an Operation at a specified path
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {OperationRequestValueOnly} operationRequestValueOnly Operation request object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    invokeOperationSyncValueOnlyAASRaw(
        requestParameters: InvokeOperationSyncValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResultValueOnly>>;

    /**
     * Synchronously invokes an Operation at a specified path
     */
    invokeOperationSyncValueOnlyAAS(
        requestParameters: InvokeOperationSyncValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResultValueOnly>;

    /**
     *
     * @summary Updates the Submodel
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {Submodel} submodel Submodel object
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    patchSubmodelAASRaw(
        requestParameters: PatchSubmodelAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the Submodel
     */
    patchSubmodelAAS(
        requestParameters: PatchSubmodelAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates an existing submodel element value at a specified path within submodel elements hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {SubmodelElement} submodelElement The updated value of the submodel element
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    patchSubmodelElementValueByPathAASRaw(
        requestParameters: PatchSubmodelElementValueByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates an existing submodel element value at a specified path within submodel elements hierarchy
     */
    patchSubmodelElementValueByPathAAS(
        requestParameters: PatchSubmodelElementValueByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {SubmodelElementMetadata} submodelElementMetadata The updated metadata attributes of the submodel element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    patchSubmodelElementValueByPathMetadataAASRaw(
        requestParameters: PatchSubmodelElementValueByPathMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy
     */
    patchSubmodelElementValueByPathMetadataAAS(
        requestParameters: PatchSubmodelElementValueByPathMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {SubmodelElementValue} submodelElementValue The updated value of the submodel element
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    patchSubmodelElementValueByPathValueOnlyAASRaw(
        requestParameters: PatchSubmodelElementValueByPathValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy
     */
    patchSubmodelElementValueByPathValueOnlyAAS(
        requestParameters: PatchSubmodelElementValueByPathValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the metadata attributes of the Submodel
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {SubmodelMetadata} submodelMetadata Submodel object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    patchSubmodelMetadataAASRaw(
        requestParameters: PatchSubmodelMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the metadata attributes of the Submodel
     */
    patchSubmodelMetadataAAS(
        requestParameters: PatchSubmodelMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the values of the Submodel
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {object} body Submodel object in the ValueOnly representation
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    patchSubmodelValueOnlyAASRaw(
        requestParameters: PatchSubmodelValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the values of the Submodel
     */
    patchSubmodelValueOnlyAAS(
        requestParameters: PatchSubmodelValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Creates a new submodel element
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {SubmodelElement} submodelElement Requested submodel element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    postSubmodelElementAASRaw(
        requestParameters: PostSubmodelElementAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>>;

    /**
     * Creates a new submodel element
     */
    postSubmodelElementAAS(
        requestParameters: PostSubmodelElementAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement>;

    /**
     *
     * @summary Creates a new submodel element at a specified path within submodel elements hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {SubmodelElement} submodelElement Requested submodel element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    postSubmodelElementByPathAASRaw(
        requestParameters: PostSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>>;

    /**
     * Creates a new submodel element at a specified path within submodel elements hierarchy
     */
    postSubmodelElementByPathAAS(
        requestParameters: PostSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement>;

    /**
     *
     * @summary Creates a submodel reference at the Asset Administration Shell
     * @param {Reference} reference Reference to the Submodel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    postSubmodelReferenceRaw(
        requestParameters: PostSubmodelReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>>;

    /**
     * Creates a submodel reference at the Asset Administration Shell
     */
    postSubmodelReference(
        requestParameters: PostSubmodelReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference>;

    /**
     *
     * @summary Updates an existing Asset Administration Shell
     * @param {AssetAdministrationShell} assetAdministrationShell Asset Administration Shell object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    putAssetAdministrationShellRaw(
        requestParameters: PutAssetAdministrationShellRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates an existing Asset Administration Shell
     */
    putAssetAdministrationShell(
        requestParameters: PutAssetAdministrationShellRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the Asset Information
     * @param {AssetInformation} assetInformation Asset Information object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    putAssetInformationRaw(
        requestParameters: PutAssetInformationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the Asset Information
     */
    putAssetInformation(
        requestParameters: PutAssetInformationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} [fileName]
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    putFileByPathAASRaw(
        requestParameters: PutFileByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     */
    putFileByPathAAS(
        requestParameters: PutFileByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the Submodel
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {Submodel} submodel Submodel object
     * @param {'deep'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    putSubmodelAASRaw(
        requestParameters: PutSubmodelAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the Submodel
     */
    putSubmodelAAS(
        requestParameters: PutSubmodelAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates an existing submodel element at a specified path within submodel elements hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {SubmodelElement} submodelElement Requested submodel element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    putSubmodelElementByPathAASRaw(
        requestParameters: PutSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates an existing submodel element at a specified path within submodel elements hierarchy
     */
    putSubmodelElementByPathAAS(
        requestParameters: PutSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @param {string} [fileName]
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellAPIApiInterface
     */
    putThumbnailRaw(
        requestParameters: PutThumbnailRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     */
    putThumbnail(
        requestParameters: PutThumbnailRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;
}

/**
 *
 */
export class AssetAdministrationShellAPIApi extends runtime.BaseAPI implements AssetAdministrationShellAPIApiInterface {
    /**
     * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     */
    async deleteFileByPathAASRaw(
        requestParameters: DeleteFileByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling deleteFileByPathAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling deleteFileByPathAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     */
    async deleteFileByPathAAS(
        requestParameters: DeleteFileByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.deleteFileByPathAASRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the submodel from the Asset Administration Shell.
     */
    async deleteSubmodelByIdAASRaw(
        requestParameters: DeleteSubmodelByIdAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling deleteSubmodelByIdAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the submodel from the Asset Administration Shell.
     */
    async deleteSubmodelByIdAAS(
        requestParameters: DeleteSubmodelByIdAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.deleteSubmodelByIdAASRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a submodel element at a specified path within the submodel elements hierarchy
     */
    async deleteSubmodelElementByPathAASRaw(
        requestParameters: DeleteSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling deleteSubmodelElementByPathAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling deleteSubmodelElementByPathAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a submodel element at a specified path within the submodel elements hierarchy
     */
    async deleteSubmodelElementByPathAAS(
        requestParameters: DeleteSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.deleteSubmodelElementByPathAASRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
     */
    async deleteSubmodelReferenceByIdRaw(
        requestParameters: DeleteSubmodelReferenceByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling deleteSubmodelReferenceById().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodel-refs/{submodelIdentifier}`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes the submodel reference from the Asset Administration Shell. Does not delete the submodel itself!
     */
    async deleteSubmodelReferenceById(
        requestParameters: DeleteSubmodelReferenceByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.deleteSubmodelReferenceByIdRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteThumbnailRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/asset-information/thumbnail`,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async deleteThumbnail(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteThumbnailRaw(initOverrides);
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsAASRaw(
        requestParameters: GetAllSubmodelElementsAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsAAS(
        requestParameters: GetAllSubmodelElementsAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsResult> {
        const response = await this.getAllSubmodelElementsAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsMetadataAASRaw(
        requestParameters: GetAllSubmodelElementsMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsMetadataResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsMetadataAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/$metadata`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsMetadataAAS(
        requestParameters: GetAllSubmodelElementsMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsMetadataResult> {
        const response = await this.getAllSubmodelElementsMetadataAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsPathAASRaw(
        requestParameters: GetAllSubmodelElementsPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetPathItemsResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsPathAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/$path`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsPathAAS(
        requestParameters: GetAllSubmodelElementsPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetPathItemsResult> {
        const response = await this.getAllSubmodelElementsPathAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel elements as a list of References
     */
    async getAllSubmodelElementsReferenceAASRaw(
        requestParameters: GetAllSubmodelElementsReferenceAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetReferencesResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsReferenceAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/$reference`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements as a list of References
     */
    async getAllSubmodelElementsReferenceAAS(
        requestParameters: GetAllSubmodelElementsReferenceAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetReferencesResult> {
        const response = await this.getAllSubmodelElementsReferenceAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel elements including their hierarchy in the ValueOnly representation
     */
    async getAllSubmodelElementsValueOnlyAASRaw(
        requestParameters: GetAllSubmodelElementsValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsValueResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsValueOnlyAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/$value`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements including their hierarchy in the ValueOnly representation
     */
    async getAllSubmodelElementsValueOnlyAAS(
        requestParameters: GetAllSubmodelElementsValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsValueResult> {
        const response = await this.getAllSubmodelElementsValueOnlyAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel references
     */
    async getAllSubmodelReferencesRaw(
        requestParameters: GetAllSubmodelReferencesRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetReferencesResult>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodel-refs`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel references
     */
    async getAllSubmodelReferences(
        requestParameters: GetAllSubmodelReferencesRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetReferencesResult> {
        const response = await this.getAllSubmodelReferencesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific Asset Administration Shell
     */
    async getAssetAdministrationShellRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<AssetAdministrationShell>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific Asset Administration Shell
     */
    async getAssetAdministrationShell(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<AssetAdministrationShell> {
        const response = await this.getAssetAdministrationShellRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific Asset Administration Shell as a Reference
     */
    async getAssetAdministrationShellReferenceRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/$reference`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific Asset Administration Shell as a Reference
     */
    async getAssetAdministrationShellReference(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference> {
        const response = await this.getAssetAdministrationShellReferenceRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the Asset Information
     */
    async getAssetInformationRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<AssetInformation>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/asset-information`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Asset Information
     */
    async getAssetInformation(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AssetInformation> {
        const response = await this.getAssetInformationRaw(initOverrides);
        return await response.value();
    }

    /**
     * Downloads file content from a specific submodel element from the Submodel at a specified path
     */
    async getFileByPathAASRaw(
        requestParameters: GetFileByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getFileByPathAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getFileByPathAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads file content from a specific submodel element from the Submodel at a specified path
     */
    async getFileByPathAAS(
        requestParameters: GetFileByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Blob> {
        const response = await this.getFileByPathAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultAASRaw(
        requestParameters: GetOperationAsyncResultAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getOperationAsyncResultAAS().',
            );
        }

        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getOperationAsyncResultAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getOperationAsyncResultAAS().',
            );
        }

        if (requestParameters['handleId'] == null) {
            throw new runtime.RequiredError(
                'handleId',
                'Required parameter "handleId" was null or undefined when calling getOperationAsyncResultAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'aasIdentifier'}}`, encodeURIComponent(String(requestParameters['aasIdentifier'])))
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath'])))
                    .replace(`{${'handleId'}}`, encodeURIComponent(String(requestParameters['handleId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultAAS(
        requestParameters: GetOperationAsyncResultAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResult> {
        const response = await this.getOperationAsyncResultAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the value of the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultValueOnlyAASRaw(
        requestParameters: GetOperationAsyncResultValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResultValueOnly>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getOperationAsyncResultValueOnlyAAS().',
            );
        }

        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getOperationAsyncResultValueOnlyAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getOperationAsyncResultValueOnlyAAS().',
            );
        }

        if (requestParameters['handleId'] == null) {
            throw new runtime.RequiredError(
                'handleId',
                'Required parameter "handleId" was null or undefined when calling getOperationAsyncResultValueOnlyAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'aasIdentifier'}}`, encodeURIComponent(String(requestParameters['aasIdentifier'])))
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath'])))
                    .replace(`{${'handleId'}}`, encodeURIComponent(String(requestParameters['handleId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the value of the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultValueOnlyAAS(
        requestParameters: GetOperationAsyncResultValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResultValueOnly> {
        const response = await this.getOperationAsyncResultValueOnlyAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Operation status of an asynchronous invoked Operation
     */
    async getOperationAsyncStatusAASRaw(
        requestParameters: GetOperationAsyncStatusAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<BaseOperationResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getOperationAsyncStatusAAS().',
            );
        }

        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getOperationAsyncStatusAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getOperationAsyncStatusAAS().',
            );
        }

        if (requestParameters['handleId'] == null) {
            throw new runtime.RequiredError(
                'handleId',
                'Required parameter "handleId" was null or undefined when calling getOperationAsyncStatusAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'aasIdentifier'}}`, encodeURIComponent(String(requestParameters['aasIdentifier'])))
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath'])))
                    .replace(`{${'handleId'}}`, encodeURIComponent(String(requestParameters['handleId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Operation status of an asynchronous invoked Operation
     */
    async getOperationAsyncStatusAAS(
        requestParameters: GetOperationAsyncStatusAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<BaseOperationResult> {
        const response = await this.getOperationAsyncStatusAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Submodel
     */
    async getSubmodelAASRaw(
        requestParameters: GetSubmodelAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Submodel>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Submodel
     */
    async getSubmodelAAS(
        requestParameters: GetSubmodelAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Submodel> {
        const response = await this.getSubmodelAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathAASRaw(
        requestParameters: GetSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathAAS(
        requestParameters: GetSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement> {
        const response = await this.getSubmodelElementByPathAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathMetadataAASRaw(
        requestParameters: GetSubmodelElementByPathMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElementMetadata>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathMetadataAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathMetadataAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the metadata attributes if a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathMetadataAAS(
        requestParameters: GetSubmodelElementByPathMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElementMetadata> {
        const response = await this.getSubmodelElementByPathMetadataAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the Path notation
     */
    async getSubmodelElementByPathPathAASRaw(
        requestParameters: GetSubmodelElementByPathPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathPathAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathPathAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the Path notation
     */
    async getSubmodelElementByPathPathAAS(
        requestParameters: GetSubmodelElementByPathPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<string>> {
        const response = await this.getSubmodelElementByPathPathAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Reference of a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     */
    async getSubmodelElementByPathReferenceAASRaw(
        requestParameters: GetSubmodelElementByPathReferenceAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathReferenceAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathReferenceAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Reference of a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     */
    async getSubmodelElementByPathReferenceAAS(
        requestParameters: GetSubmodelElementByPathReferenceAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference> {
        const response = await this.getSubmodelElementByPathReferenceAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     */
    async getSubmodelElementByPathValueOnlyAASRaw(
        requestParameters: GetSubmodelElementByPathValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElementValue>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathValueOnlyAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathValueOnlyAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     */
    async getSubmodelElementByPathValueOnlyAAS(
        requestParameters: GetSubmodelElementByPathValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElementValue> {
        const response = await this.getSubmodelElementByPathValueOnlyAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Submodel\'s metadata elements
     */
    async getSubmodelMetadataAASRaw(
        requestParameters: GetSubmodelMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelMetadata>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelMetadataAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/$metadata`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Submodel\'s metadata elements
     */
    async getSubmodelMetadataAAS(
        requestParameters: GetSubmodelMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelMetadata> {
        const response = await this.getSubmodelMetadataAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Submodel as a Reference
     */
    async getSubmodelMetadataReferenceAASRaw(
        requestParameters: GetSubmodelMetadataReferenceAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelMetadataReferenceAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/$reference`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Submodel as a Reference
     */
    async getSubmodelMetadataReferenceAAS(
        requestParameters: GetSubmodelMetadataReferenceAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference> {
        const response = await this.getSubmodelMetadataReferenceAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Submodel\'s metadata elements
     */
    async getSubmodelPathAASRaw(
        requestParameters: GetSubmodelPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelPathAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/$path`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the Submodel\'s metadata elements
     */
    async getSubmodelPathAAS(
        requestParameters: GetSubmodelPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<string>> {
        const response = await this.getSubmodelPathAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Submodel\'s ValueOnly representation
     */
    async getSubmodelValueOnlyAASRaw(
        requestParameters: GetSubmodelValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelValueOnlyAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/$value`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the Submodel\'s ValueOnly representation
     */
    async getSubmodelValueOnlyAAS(
        requestParameters: GetSubmodelValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object> {
        const response = await this.getSubmodelValueOnlyAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getThumbnailRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Blob>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/aas/asset-information/thumbnail`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.BlobApiResponse(response);
    }

    /**
     */
    async getThumbnail(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob> {
        const response = await this.getThumbnailRaw(initOverrides);
        return await response.value();
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncAASRaw(
        requestParameters: InvokeOperationAsyncAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling invokeOperationAsyncAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationAsyncAAS().',
            );
        }

        if (requestParameters['operationRequest'] == null) {
            throw new runtime.RequiredError(
                'operationRequest',
                'Required parameter "operationRequest" was null or undefined when calling invokeOperationAsyncAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['operationRequest'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncAAS(
        requestParameters: InvokeOperationAsyncAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.invokeOperationAsyncAASRaw(requestParameters, initOverrides);
    }

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncValueOnlyAASRaw(
        requestParameters: InvokeOperationAsyncValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling invokeOperationAsyncValueOnlyAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationAsyncValueOnlyAAS().',
            );
        }

        if (requestParameters['operationRequestValueOnly'] == null) {
            throw new runtime.RequiredError(
                'operationRequestValueOnly',
                'Required parameter "operationRequestValueOnly" was null or undefined when calling invokeOperationAsyncValueOnlyAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-asnyc/$value`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['operationRequestValueOnly'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncValueOnlyAAS(
        requestParameters: InvokeOperationAsyncValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.invokeOperationAsyncValueOnlyAASRaw(requestParameters, initOverrides);
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationSyncAASRaw(
        requestParameters: InvokeOperationSyncAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling invokeOperationSyncAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationSyncAAS().',
            );
        }

        if (requestParameters['operationRequest'] == null) {
            throw new runtime.RequiredError(
                'operationRequest',
                'Required parameter "operationRequest" was null or undefined when calling invokeOperationSyncAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['operationRequest'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationSyncAAS(
        requestParameters: InvokeOperationSyncAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResult> {
        const response = await this.invokeOperationSyncAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationSyncValueOnlyAASRaw(
        requestParameters: InvokeOperationSyncValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResultValueOnly>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling invokeOperationSyncValueOnlyAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationSyncValueOnlyAAS().',
            );
        }

        if (requestParameters['operationRequestValueOnly'] == null) {
            throw new runtime.RequiredError(
                'operationRequestValueOnly',
                'Required parameter "operationRequestValueOnly" was null or undefined when calling invokeOperationSyncValueOnlyAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['operationRequestValueOnly'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationSyncValueOnlyAAS(
        requestParameters: InvokeOperationSyncValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResultValueOnly> {
        const response = await this.invokeOperationSyncValueOnlyAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the Submodel
     */
    async patchSubmodelAASRaw(
        requestParameters: PatchSubmodelAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelAAS().',
            );
        }

        if (requestParameters['submodel'] == null) {
            throw new runtime.RequiredError(
                'submodel',
                'Required parameter "submodel" was null or undefined when calling patchSubmodelAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodel'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the Submodel
     */
    async patchSubmodelAAS(
        requestParameters: PatchSubmodelAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelAASRaw(requestParameters, initOverrides);
    }

    /**
     * Updates an existing submodel element value at a specified path within submodel elements hierarchy
     */
    async patchSubmodelElementValueByPathAASRaw(
        requestParameters: PatchSubmodelElementValueByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelElementValueByPathAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling patchSubmodelElementValueByPathAAS().',
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling patchSubmodelElementValueByPathAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElement'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing submodel element value at a specified path within submodel elements hierarchy
     */
    async patchSubmodelElementValueByPathAAS(
        requestParameters: PatchSubmodelElementValueByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelElementValueByPathAASRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy
     */
    async patchSubmodelElementValueByPathMetadataAASRaw(
        requestParameters: PatchSubmodelElementValueByPathMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelElementValueByPathMetadataAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling patchSubmodelElementValueByPathMetadataAAS().',
            );
        }

        if (requestParameters['submodelElementMetadata'] == null) {
            throw new runtime.RequiredError(
                'submodelElementMetadata',
                'Required parameter "submodelElementMetadata" was null or undefined when calling patchSubmodelElementValueByPathMetadataAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElementMetadata'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the metadata attributes of an existing submodel element value at a specified path within submodel elements hierarchy
     */
    async patchSubmodelElementValueByPathMetadataAAS(
        requestParameters: PatchSubmodelElementValueByPathMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelElementValueByPathMetadataAASRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy
     */
    async patchSubmodelElementValueByPathValueOnlyAASRaw(
        requestParameters: PatchSubmodelElementValueByPathValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelElementValueByPathValueOnlyAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling patchSubmodelElementValueByPathValueOnlyAAS().',
            );
        }

        if (requestParameters['submodelElementValue'] == null) {
            throw new runtime.RequiredError(
                'submodelElementValue',
                'Required parameter "submodelElementValue" was null or undefined when calling patchSubmodelElementValueByPathValueOnlyAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElementValue'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the value of an existing submodel element value at a specified path within submodel elements hierarchy
     */
    async patchSubmodelElementValueByPathValueOnlyAAS(
        requestParameters: PatchSubmodelElementValueByPathValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelElementValueByPathValueOnlyAASRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the metadata attributes of the Submodel
     */
    async patchSubmodelMetadataAASRaw(
        requestParameters: PatchSubmodelMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelMetadataAAS().',
            );
        }

        if (requestParameters['submodelMetadata'] == null) {
            throw new runtime.RequiredError(
                'submodelMetadata',
                'Required parameter "submodelMetadata" was null or undefined when calling patchSubmodelMetadataAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/$metadata`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelMetadata'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the metadata attributes of the Submodel
     */
    async patchSubmodelMetadataAAS(
        requestParameters: PatchSubmodelMetadataAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelMetadataAASRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the values of the Submodel
     */
    async patchSubmodelValueOnlyAASRaw(
        requestParameters: PatchSubmodelValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelValueOnlyAAS().',
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchSubmodelValueOnlyAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/$value`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'] as any,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the values of the Submodel
     */
    async patchSubmodelValueOnlyAAS(
        requestParameters: PatchSubmodelValueOnlyAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelValueOnlyAASRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new submodel element
     */
    async postSubmodelElementAASRaw(
        requestParameters: PostSubmodelElementAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling postSubmodelElementAAS().',
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling postSubmodelElementAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElement'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new submodel element
     */
    async postSubmodelElementAAS(
        requestParameters: PostSubmodelElementAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement> {
        const response = await this.postSubmodelElementAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new submodel element at a specified path within submodel elements hierarchy
     */
    async postSubmodelElementByPathAASRaw(
        requestParameters: PostSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling postSubmodelElementByPathAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling postSubmodelElementByPathAAS().',
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling postSubmodelElementByPathAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElement'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new submodel element at a specified path within submodel elements hierarchy
     */
    async postSubmodelElementByPathAAS(
        requestParameters: PostSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement> {
        const response = await this.postSubmodelElementByPathAASRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a submodel reference at the Asset Administration Shell
     */
    async postSubmodelReferenceRaw(
        requestParameters: PostSubmodelReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>> {
        if (requestParameters['reference'] == null) {
            throw new runtime.RequiredError(
                'reference',
                'Required parameter "reference" was null or undefined when calling postSubmodelReference().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodel-refs`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['reference'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a submodel reference at the Asset Administration Shell
     */
    async postSubmodelReference(
        requestParameters: PostSubmodelReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference> {
        const response = await this.postSubmodelReferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing Asset Administration Shell
     */
    async putAssetAdministrationShellRaw(
        requestParameters: PutAssetAdministrationShellRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['assetAdministrationShell'] == null) {
            throw new runtime.RequiredError(
                'assetAdministrationShell',
                'Required parameter "assetAdministrationShell" was null or undefined when calling putAssetAdministrationShell().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['assetAdministrationShell'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing Asset Administration Shell
     */
    async putAssetAdministrationShell(
        requestParameters: PutAssetAdministrationShellRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.putAssetAdministrationShellRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the Asset Information
     */
    async putAssetInformationRaw(
        requestParameters: PutAssetInformationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['assetInformation'] == null) {
            throw new runtime.RequiredError(
                'assetInformation',
                'Required parameter "assetInformation" was null or undefined when calling putAssetInformation().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/asset-information`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['assetInformation'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the Asset Information
     */
    async putAssetInformation(
        requestParameters: PutAssetInformationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.putAssetInformationRaw(requestParameters, initOverrides);
    }

    /**
     * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putFileByPathAASRaw(
        requestParameters: PutFileByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling putFileByPathAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling putFileByPathAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('fileName', requestParameters['fileName'] as any);
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putFileByPathAAS(
        requestParameters: PutFileByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.putFileByPathAASRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the Submodel
     */
    async putSubmodelAASRaw(
        requestParameters: PutSubmodelAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling putSubmodelAAS().',
            );
        }

        if (requestParameters['submodel'] == null) {
            throw new runtime.RequiredError(
                'submodel',
                'Required parameter "submodel" was null or undefined when calling putSubmodelAAS().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodel'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the Submodel
     */
    async putSubmodelAAS(
        requestParameters: PutSubmodelAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.putSubmodelAASRaw(requestParameters, initOverrides);
    }

    /**
     * Updates an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putSubmodelElementByPathAASRaw(
        requestParameters: PutSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling putSubmodelElementByPathAAS().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling putSubmodelElementByPathAAS().',
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling putSubmodelElementByPathAAS().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/aas/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElement'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putSubmodelElementByPathAAS(
        requestParameters: PutSubmodelElementByPathAASRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.putSubmodelElementByPathAASRaw(requestParameters, initOverrides);
    }

    /**
     */
    async putThumbnailRaw(
        requestParameters: PutThumbnailRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('fileName', requestParameters['fileName'] as any);
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request(
            {
                path: `/aas/asset-information/thumbnail`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async putThumbnail(
        requestParameters: PutThumbnailRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.putThumbnailRaw(requestParameters, initOverrides);
    }
}

/**
 * @export
 */
export const GetAllSubmodelElementsAASLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetAllSubmodelElementsAASLevelEnum =
    (typeof GetAllSubmodelElementsAASLevelEnum)[keyof typeof GetAllSubmodelElementsAASLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsAASExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetAllSubmodelElementsAASExtentEnum =
    (typeof GetAllSubmodelElementsAASExtentEnum)[keyof typeof GetAllSubmodelElementsAASExtentEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsPathAASLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetAllSubmodelElementsPathAASLevelEnum =
    (typeof GetAllSubmodelElementsPathAASLevelEnum)[keyof typeof GetAllSubmodelElementsPathAASLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsReferenceAASLevelEnum = {
    Core: 'core',
} as const;
export type GetAllSubmodelElementsReferenceAASLevelEnum =
    (typeof GetAllSubmodelElementsReferenceAASLevelEnum)[keyof typeof GetAllSubmodelElementsReferenceAASLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsValueOnlyAASLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetAllSubmodelElementsValueOnlyAASLevelEnum =
    (typeof GetAllSubmodelElementsValueOnlyAASLevelEnum)[keyof typeof GetAllSubmodelElementsValueOnlyAASLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsValueOnlyAASExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetAllSubmodelElementsValueOnlyAASExtentEnum =
    (typeof GetAllSubmodelElementsValueOnlyAASExtentEnum)[keyof typeof GetAllSubmodelElementsValueOnlyAASExtentEnum];
/**
 * @export
 */
export const GetSubmodelAASLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelAASLevelEnum = (typeof GetSubmodelAASLevelEnum)[keyof typeof GetSubmodelAASLevelEnum];
/**
 * @export
 */
export const GetSubmodelAASExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetSubmodelAASExtentEnum = (typeof GetSubmodelAASExtentEnum)[keyof typeof GetSubmodelAASExtentEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathAASLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelElementByPathAASLevelEnum =
    (typeof GetSubmodelElementByPathAASLevelEnum)[keyof typeof GetSubmodelElementByPathAASLevelEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathAASExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetSubmodelElementByPathAASExtentEnum =
    (typeof GetSubmodelElementByPathAASExtentEnum)[keyof typeof GetSubmodelElementByPathAASExtentEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathPathAASLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelElementByPathPathAASLevelEnum =
    (typeof GetSubmodelElementByPathPathAASLevelEnum)[keyof typeof GetSubmodelElementByPathPathAASLevelEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathValueOnlyAASLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelElementByPathValueOnlyAASLevelEnum =
    (typeof GetSubmodelElementByPathValueOnlyAASLevelEnum)[keyof typeof GetSubmodelElementByPathValueOnlyAASLevelEnum];
/**
 * @export
 */
export const GetSubmodelMetadataReferenceAASLevelEnum = {
    Core: 'core',
} as const;
export type GetSubmodelMetadataReferenceAASLevelEnum =
    (typeof GetSubmodelMetadataReferenceAASLevelEnum)[keyof typeof GetSubmodelMetadataReferenceAASLevelEnum];
/**
 * @export
 */
export const GetSubmodelPathAASLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelPathAASLevelEnum =
    (typeof GetSubmodelPathAASLevelEnum)[keyof typeof GetSubmodelPathAASLevelEnum];
/**
 * @export
 */
export const GetSubmodelValueOnlyAASLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelValueOnlyAASLevelEnum =
    (typeof GetSubmodelValueOnlyAASLevelEnum)[keyof typeof GetSubmodelValueOnlyAASLevelEnum];
/**
 * @export
 */
export const GetSubmodelValueOnlyAASExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetSubmodelValueOnlyAASExtentEnum =
    (typeof GetSubmodelValueOnlyAASExtentEnum)[keyof typeof GetSubmodelValueOnlyAASExtentEnum];
/**
 * @export
 */
export const PatchSubmodelAASLevelEnum = {
    Core: 'core',
} as const;
export type PatchSubmodelAASLevelEnum = (typeof PatchSubmodelAASLevelEnum)[keyof typeof PatchSubmodelAASLevelEnum];
/**
 * @export
 */
export const PatchSubmodelElementValueByPathAASLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type PatchSubmodelElementValueByPathAASLevelEnum =
    (typeof PatchSubmodelElementValueByPathAASLevelEnum)[keyof typeof PatchSubmodelElementValueByPathAASLevelEnum];
/**
 * @export
 */
export const PatchSubmodelElementValueByPathValueOnlyAASLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type PatchSubmodelElementValueByPathValueOnlyAASLevelEnum =
    (typeof PatchSubmodelElementValueByPathValueOnlyAASLevelEnum)[keyof typeof PatchSubmodelElementValueByPathValueOnlyAASLevelEnum];
/**
 * @export
 */
export const PatchSubmodelValueOnlyAASLevelEnum = {
    Core: 'core',
} as const;
export type PatchSubmodelValueOnlyAASLevelEnum =
    (typeof PatchSubmodelValueOnlyAASLevelEnum)[keyof typeof PatchSubmodelValueOnlyAASLevelEnum];
/**
 * @export
 */
export const PutSubmodelAASLevelEnum = {
    Deep: 'deep',
} as const;
export type PutSubmodelAASLevelEnum = (typeof PutSubmodelAASLevelEnum)[keyof typeof PutSubmodelAASLevelEnum];
