/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Entire API Collection
 * All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"
 *
 * The version of the OpenAPI document: V3.0.4
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { GetSubmodelDescriptorsResult, Result, SubmodelDescriptor } from '../models/index';

export interface DeleteSubmodelDescriptorByIdRequest {
    submodelIdentifier: string;
}

export interface GetAllSubmodelDescriptorsRequest {
    limit?: number;
    cursor?: string;
}

export interface GetSubmodelDescriptorByIdRequest {
    submodelIdentifier: string;
}

export interface PostSubmodelDescriptorRequest {
    submodelDescriptor: SubmodelDescriptor;
}

export interface PutSubmodelDescriptorByIdRequest {
    submodelIdentifier: string;
    submodelDescriptor: SubmodelDescriptor;
}

/**
 * SubmodelRegistryAPIApi - interface
 *
 * @export
 * @interface SubmodelRegistryAPIApiInterface
 */
export interface SubmodelRegistryAPIApiInterface {
    /**
     *
     * @summary Deletes a Submodel Descriptor, i.e. de-registers a submodel
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRegistryAPIApiInterface
     */
    deleteSubmodelDescriptorByIdRaw(
        requestParameters: DeleteSubmodelDescriptorByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a Submodel Descriptor, i.e. de-registers a submodel
     */
    deleteSubmodelDescriptorById(
        requestParameters: DeleteSubmodelDescriptorByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Returns all Submodel Descriptors
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRegistryAPIApiInterface
     */
    getAllSubmodelDescriptorsRaw(
        requestParameters: GetAllSubmodelDescriptorsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelDescriptorsResult>>;

    /**
     * Returns all Submodel Descriptors
     */
    getAllSubmodelDescriptors(
        requestParameters: GetAllSubmodelDescriptorsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelDescriptorsResult>;

    /**
     *
     * @summary Returns a specific Submodel Descriptor
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRegistryAPIApiInterface
     */
    getSubmodelDescriptorByIdRaw(
        requestParameters: GetSubmodelDescriptorByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelDescriptor>>;

    /**
     * Returns a specific Submodel Descriptor
     */
    getSubmodelDescriptorById(
        requestParameters: GetSubmodelDescriptorByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelDescriptor>;

    /**
     *
     * @summary Creates a new Submodel Descriptor, i.e. registers a submodel
     * @param {SubmodelDescriptor} submodelDescriptor Submodel Descriptor object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRegistryAPIApiInterface
     */
    postSubmodelDescriptorRaw(
        requestParameters: PostSubmodelDescriptorRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelDescriptor>>;

    /**
     * Creates a new Submodel Descriptor, i.e. registers a submodel
     */
    postSubmodelDescriptor(
        requestParameters: PostSubmodelDescriptorRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelDescriptor>;

    /**
     *
     * @summary Updates an existing Submodel Descriptor
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {SubmodelDescriptor} submodelDescriptor Submodel Descriptor object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRegistryAPIApiInterface
     */
    putSubmodelDescriptorByIdRaw(
        requestParameters: PutSubmodelDescriptorByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates an existing Submodel Descriptor
     */
    putSubmodelDescriptorById(
        requestParameters: PutSubmodelDescriptorByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;
}

/**
 *
 */
export class SubmodelRegistryAPIApi extends runtime.BaseAPI implements SubmodelRegistryAPIApiInterface {
    /**
     * Deletes a Submodel Descriptor, i.e. de-registers a submodel
     */
    async deleteSubmodelDescriptorByIdRaw(
        requestParameters: DeleteSubmodelDescriptorByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling deleteSubmodelDescriptorById().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel-descriptors/{submodelIdentifier}`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Submodel Descriptor, i.e. de-registers a submodel
     */
    async deleteSubmodelDescriptorById(
        requestParameters: DeleteSubmodelDescriptorByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.deleteSubmodelDescriptorByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all Submodel Descriptors
     */
    async getAllSubmodelDescriptorsRaw(
        requestParameters: GetAllSubmodelDescriptorsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelDescriptorsResult>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel-descriptors`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all Submodel Descriptors
     */
    async getAllSubmodelDescriptors(
        requestParameters: GetAllSubmodelDescriptorsRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelDescriptorsResult> {
        const response = await this.getAllSubmodelDescriptorsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific Submodel Descriptor
     */
    async getSubmodelDescriptorByIdRaw(
        requestParameters: GetSubmodelDescriptorByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelDescriptor>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelDescriptorById().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel-descriptors/{submodelIdentifier}`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific Submodel Descriptor
     */
    async getSubmodelDescriptorById(
        requestParameters: GetSubmodelDescriptorByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelDescriptor> {
        const response = await this.getSubmodelDescriptorByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new Submodel Descriptor, i.e. registers a submodel
     */
    async postSubmodelDescriptorRaw(
        requestParameters: PostSubmodelDescriptorRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelDescriptor>> {
        if (requestParameters['submodelDescriptor'] == null) {
            throw new runtime.RequiredError(
                'submodelDescriptor',
                'Required parameter "submodelDescriptor" was null or undefined when calling postSubmodelDescriptor().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel-descriptors`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelDescriptor'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new Submodel Descriptor, i.e. registers a submodel
     */
    async postSubmodelDescriptor(
        requestParameters: PostSubmodelDescriptorRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelDescriptor> {
        const response = await this.postSubmodelDescriptorRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing Submodel Descriptor
     */
    async putSubmodelDescriptorByIdRaw(
        requestParameters: PutSubmodelDescriptorByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling putSubmodelDescriptorById().',
            );
        }

        if (requestParameters['submodelDescriptor'] == null) {
            throw new runtime.RequiredError(
                'submodelDescriptor',
                'Required parameter "submodelDescriptor" was null or undefined when calling putSubmodelDescriptorById().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel-descriptors/{submodelIdentifier}`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelDescriptor'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing Submodel Descriptor
     */
    async putSubmodelDescriptorById(
        requestParameters: PutSubmodelDescriptorByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.putSubmodelDescriptorByIdRaw(requestParameters, initOverrides);
    }
}
