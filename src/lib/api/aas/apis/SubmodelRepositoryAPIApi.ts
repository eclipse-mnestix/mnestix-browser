/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Entire API Collection
 * All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"
 *
 * The version of the OpenAPI document: V3.0.4
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
    GetPathItemsResult,
    GetReferencesResult,
    GetSubmodelElementsMetadataResult,
    GetSubmodelElementsResult,
    GetSubmodelElementsValueResult,
    GetSubmodelsMetadataResult,
    GetSubmodelsResult,
    GetSubmodelsValueResult,
    OperationRequest,
    OperationRequestValueOnly,
    OperationResult,
    OperationResultValueOnly,
    Reference,
    Result,
    Submodel,
    SubmodelElement,
    SubmodelElementMetadata,
    SubmodelElementValue,
    SubmodelMetadata,
} from '../models/index';

export interface DeleteFileByPathSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
}

export interface DeleteSubmodelByIdRequest {
    submodelIdentifier: string;
}

export interface DeleteSubmodelElementByPathSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
}

export interface GetAllSubmodelElementsMetadataSubmodelRepositoryRequest {
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
}

export interface GetAllSubmodelElementsPathSubmodelRepoRequest {
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsPathSubmodelRepoLevelEnum;
}

export interface GetAllSubmodelElementsReferenceSubmodelRepoRequest {
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsReferenceSubmodelRepoLevelEnum;
}

export interface GetAllSubmodelElementsSubmodelRepositoryRequest {
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsSubmodelRepositoryLevelEnum;
    extent?: GetAllSubmodelElementsSubmodelRepositoryExtentEnum;
}

export interface GetAllSubmodelElementsValueOnlySubmodelRepoRequest {
    submodelIdentifier: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsValueOnlySubmodelRepoLevelEnum;
    extent?: GetAllSubmodelElementsValueOnlySubmodelRepoExtentEnum;
}

export interface GetAllSubmodelsRequest {
    semanticId?: string;
    idShort?: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelsLevelEnum;
    extent?: GetAllSubmodelsExtentEnum;
}

export interface GetAllSubmodelsMetadataRequest {
    semanticId?: string;
    idShort?: string;
    limit?: number;
    cursor?: string;
}

export interface GetAllSubmodelsPathRequest {
    semanticId?: string;
    idShort?: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelsPathLevelEnum;
}

export interface GetAllSubmodelsReferenceRequest {
    semanticId?: string;
    idShort?: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelsReferenceLevelEnum;
}

export interface GetAllSubmodelsValueOnlyRequest {
    semanticId?: string;
    idShort?: string;
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelsValueOnlyLevelEnum;
    extent?: GetAllSubmodelsValueOnlyExtentEnum;
}

export interface GetFileByPathSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
}

export interface GetOperationAsyncResultSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
    handleId: string;
}

export interface GetOperationAsyncResultValueOnlySubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
    handleId: string;
}

export interface GetOperationAsyncStatusSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
    handleId: string;
}

export interface GetSubmodelByIdRequest {
    submodelIdentifier: string;
    level?: GetSubmodelByIdLevelEnum;
    extent?: GetSubmodelByIdExtentEnum;
}

export interface GetSubmodelByIdMetadataRequest {
    submodelIdentifier: string;
}

export interface GetSubmodelByIdPathRequest {
    submodelIdentifier: string;
    level?: GetSubmodelByIdPathLevelEnum;
}

export interface GetSubmodelByIdReferenceRequest {
    submodelIdentifier: string;
}

export interface GetSubmodelByIdValueOnlyRequest {
    submodelIdentifier: string;
    level?: GetSubmodelByIdValueOnlyLevelEnum;
    extent?: GetSubmodelByIdValueOnlyExtentEnum;
}

export interface GetSubmodelElementByPathMetadataSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
}

export interface GetSubmodelElementByPathPathSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
    level?: GetSubmodelElementByPathPathSubmodelRepoLevelEnum;
}

export interface GetSubmodelElementByPathReferenceSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
}

export interface GetSubmodelElementByPathSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
    level?: GetSubmodelElementByPathSubmodelRepoLevelEnum;
    extent?: GetSubmodelElementByPathSubmodelRepoExtentEnum;
}

export interface GetSubmodelElementByPathValueOnlySubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
    level?: GetSubmodelElementByPathValueOnlySubmodelRepoLevelEnum;
    extent?: GetSubmodelElementByPathValueOnlySubmodelRepoExtentEnum;
}

export interface InvokeOperationAsyncSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
    operationRequest: OperationRequest;
}

export interface InvokeOperationAsyncValueOnlySubmodelRepoRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    operationRequestValueOnly: OperationRequestValueOnly;
}

export interface InvokeOperationSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
    operationRequest: OperationRequest;
    async?: boolean;
}

export interface InvokeOperationValueOnlySubmodelRepoRequest {
    aasIdentifier: string;
    submodelIdentifier: string;
    idShortPath: string;
    operationRequestValueOnly: OperationRequestValueOnly;
    async?: boolean;
}

export interface PatchSubmodelByIdRequest {
    submodelIdentifier: string;
    submodel: Submodel;
    level?: PatchSubmodelByIdLevelEnum;
}

export interface PatchSubmodelByIdMetadataRequest {
    submodelIdentifier: string;
    submodelMetadata: SubmodelMetadata;
}

export interface PatchSubmodelByIdValueOnlyRequest {
    submodelIdentifier: string;
    body: object;
    level?: PatchSubmodelByIdValueOnlyLevelEnum;
}

export interface PatchSubmodelElementByPathMetadataSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
    submodelElementMetadata: SubmodelElementMetadata;
}

export interface PatchSubmodelElementByPathSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
    submodelElement: SubmodelElement;
    level?: PatchSubmodelElementByPathSubmodelRepoLevelEnum;
}

export interface PatchSubmodelElementByPathValueOnlySubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
    submodelElementValue: SubmodelElementValue;
}

export interface PostSubmodelRequest {
    submodel: Submodel;
}

export interface PostSubmodelElementByPathSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
    submodelElement: SubmodelElement;
}

export interface PostSubmodelElementSubmodelRepositoryRequest {
    submodelIdentifier: string;
    submodelElement: SubmodelElement;
}

export interface PutFileByPathSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
    fileName?: string;
    file?: Blob;
}

export interface PutSubmodelByIdRequest {
    submodelIdentifier: string;
    submodel: Submodel;
}

export interface PutSubmodelElementByPathSubmodelRepoRequest {
    submodelIdentifier: string;
    idShortPath: string;
    submodelElement: SubmodelElement;
    level?: PutSubmodelElementByPathSubmodelRepoLevelEnum;
}

/**
 * SubmodelRepositoryAPIApi - interface
 *
 * @export
 * @interface SubmodelRepositoryAPIApiInterface
 */
export interface SubmodelRepositoryAPIApiInterface {
    /**
     *
     * @summary Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    deleteFileByPathSubmodelRepoRaw(
        requestParameters: DeleteFileByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     */
    deleteFileByPathSubmodelRepo(
        requestParameters: DeleteFileByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Deletes a Submodel
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    deleteSubmodelByIdRaw(
        requestParameters: DeleteSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a Submodel
     */
    deleteSubmodelById(
        requestParameters: DeleteSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Deletes a submodel element at a specified path within the submodel elements hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    deleteSubmodelElementByPathSubmodelRepoRaw(
        requestParameters: DeleteSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a submodel element at a specified path within the submodel elements hierarchy
     */
    deleteSubmodelElementByPathSubmodelRepo(
        requestParameters: DeleteSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Returns the metadata attributes of all submodel elements including their hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getAllSubmodelElementsMetadataSubmodelRepositoryRaw(
        requestParameters: GetAllSubmodelElementsMetadataSubmodelRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsMetadataResult>>;

    /**
     * Returns the metadata attributes of all submodel elements including their hierarchy
     */
    getAllSubmodelElementsMetadataSubmodelRepository(
        requestParameters: GetAllSubmodelElementsMetadataSubmodelRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsMetadataResult>;

    /**
     *
     * @summary Returns all submodel elements including their hierarchy in the Path notation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getAllSubmodelElementsPathSubmodelRepoRaw(
        requestParameters: GetAllSubmodelElementsPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetPathItemsResult>>;

    /**
     * Returns all submodel elements including their hierarchy in the Path notation
     */
    getAllSubmodelElementsPathSubmodelRepo(
        requestParameters: GetAllSubmodelElementsPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetPathItemsResult>;

    /**
     *
     * @summary Returns the References of all submodel elements
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getAllSubmodelElementsReferenceSubmodelRepoRaw(
        requestParameters: GetAllSubmodelElementsReferenceSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetReferencesResult>>;

    /**
     * Returns the References of all submodel elements
     */
    getAllSubmodelElementsReferenceSubmodelRepo(
        requestParameters: GetAllSubmodelElementsReferenceSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetReferencesResult>;

    /**
     *
     * @summary Returns all submodel elements including their hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getAllSubmodelElementsSubmodelRepositoryRaw(
        requestParameters: GetAllSubmodelElementsSubmodelRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsResult>>;

    /**
     * Returns all submodel elements including their hierarchy
     */
    getAllSubmodelElementsSubmodelRepository(
        requestParameters: GetAllSubmodelElementsSubmodelRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsResult>;

    /**
     *
     * @summary Returns all submodel elements including their hierarchy in the ValueOnly representation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getAllSubmodelElementsValueOnlySubmodelRepoRaw(
        requestParameters: GetAllSubmodelElementsValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsValueResult>>;

    /**
     * Returns all submodel elements including their hierarchy in the ValueOnly representation
     */
    getAllSubmodelElementsValueOnlySubmodelRepo(
        requestParameters: GetAllSubmodelElementsValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsValueResult>;

    /**
     *
     * @summary Returns all Submodels
     * @param {string} [semanticId] The value of the semantic id reference (BASE64-URL-encoded)
     * @param {string} [idShort] The Asset Administration Shell’s IdShort
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getAllSubmodelsRaw(
        requestParameters: GetAllSubmodelsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelsResult>>;

    /**
     * Returns all Submodels
     */
    getAllSubmodels(
        requestParameters: GetAllSubmodelsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelsResult>;

    /**
     *
     * @summary Returns the metadata attributes of all Submodels
     * @param {string} [semanticId] The value of the semantic id reference (BASE64-URL-encoded)
     * @param {string} [idShort] The Asset Administration Shell’s IdShort
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getAllSubmodelsMetadataRaw(
        requestParameters: GetAllSubmodelsMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelsMetadataResult>>;

    /**
     * Returns the metadata attributes of all Submodels
     */
    getAllSubmodelsMetadata(
        requestParameters: GetAllSubmodelsMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelsMetadataResult>;

    /**
     *
     * @summary Returns all Submodels in the Path notation
     * @param {string} [semanticId] The value of the semantic id reference (BASE64-URL-encoded)
     * @param {string} [idShort] The Asset Administration Shell’s IdShort
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getAllSubmodelsPathRaw(
        requestParameters: GetAllSubmodelsPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetPathItemsResult>>;

    /**
     * Returns all Submodels in the Path notation
     */
    getAllSubmodelsPath(
        requestParameters: GetAllSubmodelsPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetPathItemsResult>;

    /**
     *
     * @summary Returns the References for all Submodels
     * @param {string} [semanticId] The value of the semantic id reference (BASE64-URL-encoded)
     * @param {string} [idShort] The Asset Administration Shell’s IdShort
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getAllSubmodelsReferenceRaw(
        requestParameters: GetAllSubmodelsReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetReferencesResult>>;

    /**
     * Returns the References for all Submodels
     */
    getAllSubmodelsReference(
        requestParameters: GetAllSubmodelsReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetReferencesResult>;

    /**
     *
     * @summary Returns all Submodels in their ValueOnly representation
     * @param {string} [semanticId] The value of the semantic id reference (BASE64-URL-encoded)
     * @param {string} [idShort] The Asset Administration Shell’s IdShort
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getAllSubmodelsValueOnlyRaw(
        requestParameters: GetAllSubmodelsValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelsValueResult>>;

    /**
     * Returns all Submodels in their ValueOnly representation
     */
    getAllSubmodelsValueOnly(
        requestParameters: GetAllSubmodelsValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelsValueResult>;

    /**
     *
     * @summary Downloads file content from a specific submodel element from the Submodel at a specified path
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getFileByPathSubmodelRepoRaw(
        requestParameters: GetFileByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Downloads file content from a specific submodel element from the Submodel at a specified path
     */
    getFileByPathSubmodelRepo(
        requestParameters: GetFileByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Blob>;

    /**
     *
     * @summary Returns the Operation result of an asynchronous invoked Operation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getOperationAsyncResultSubmodelRepoRaw(
        requestParameters: GetOperationAsyncResultSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResult>>;

    /**
     * Returns the Operation result of an asynchronous invoked Operation
     */
    getOperationAsyncResultSubmodelRepo(
        requestParameters: GetOperationAsyncResultSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResult>;

    /**
     *
     * @summary Returns the Operation result of an asynchronous invoked Operation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getOperationAsyncResultValueOnlySubmodelRepoRaw(
        requestParameters: GetOperationAsyncResultValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResultValueOnly>>;

    /**
     * Returns the Operation result of an asynchronous invoked Operation
     */
    getOperationAsyncResultValueOnlySubmodelRepo(
        requestParameters: GetOperationAsyncResultValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResultValueOnly>;

    /**
     *
     * @summary Returns the Operation status of an asynchronous invoked Operation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getOperationAsyncStatusSubmodelRepoRaw(
        requestParameters: GetOperationAsyncStatusSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResult>>;

    /**
     * Returns the Operation status of an asynchronous invoked Operation
     */
    getOperationAsyncStatusSubmodelRepo(
        requestParameters: GetOperationAsyncStatusSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResult>;

    /**
     *
     * @summary Returns a specific Submodel
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getSubmodelByIdRaw(
        requestParameters: GetSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Submodel>>;

    /**
     * Returns a specific Submodel
     */
    getSubmodelById(
        requestParameters: GetSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Submodel>;

    /**
     *
     * @summary Returns the metadata attributes of a specific Submodel
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getSubmodelByIdMetadataRaw(
        requestParameters: GetSubmodelByIdMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelMetadata>>;

    /**
     * Returns the metadata attributes of a specific Submodel
     */
    getSubmodelByIdMetadata(
        requestParameters: GetSubmodelByIdMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelMetadata>;

    /**
     *
     * @summary Returns a specific Submodel in the Path notation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getSubmodelByIdPathRaw(
        requestParameters: GetSubmodelByIdPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Returns a specific Submodel in the Path notation
     */
    getSubmodelByIdPath(
        requestParameters: GetSubmodelByIdPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<string>>;

    /**
     *
     * @summary Returns the Reference of a specific Submodel
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getSubmodelByIdReferenceRaw(
        requestParameters: GetSubmodelByIdReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>>;

    /**
     * Returns the Reference of a specific Submodel
     */
    getSubmodelByIdReference(
        requestParameters: GetSubmodelByIdReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference>;

    /**
     *
     * @summary Returns a specific Submodel in the ValueOnly representation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getSubmodelByIdValueOnlyRaw(
        requestParameters: GetSubmodelByIdValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>>;

    /**
     * Returns a specific Submodel in the ValueOnly representation
     */
    getSubmodelByIdValueOnly(
        requestParameters: GetSubmodelByIdValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object>;

    /**
     *
     * @summary Returns the matadata attributes of a specific submodel element from the Submodel at a specified path
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getSubmodelElementByPathMetadataSubmodelRepoRaw(
        requestParameters: GetSubmodelElementByPathMetadataSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElementMetadata>>;

    /**
     * Returns the matadata attributes of a specific submodel element from the Submodel at a specified path
     */
    getSubmodelElementByPathMetadataSubmodelRepo(
        requestParameters: GetSubmodelElementByPathMetadataSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElementMetadata>;

    /**
     *
     * @summary Returns a specific submodel element from the Submodel at a specified path in the Path notation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getSubmodelElementByPathPathSubmodelRepoRaw(
        requestParameters: GetSubmodelElementByPathPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the Path notation
     */
    getSubmodelElementByPathPathSubmodelRepo(
        requestParameters: GetSubmodelElementByPathPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<string>>;

    /**
     *
     * @summary Returns the Referene of a specific submodel element from the Submodel at a specified path
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getSubmodelElementByPathReferenceSubmodelRepoRaw(
        requestParameters: GetSubmodelElementByPathReferenceSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>>;

    /**
     * Returns the Referene of a specific submodel element from the Submodel at a specified path
     */
    getSubmodelElementByPathReferenceSubmodelRepo(
        requestParameters: GetSubmodelElementByPathReferenceSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference>;

    /**
     *
     * @summary Returns a specific submodel element from the Submodel at a specified path
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getSubmodelElementByPathSubmodelRepoRaw(
        requestParameters: GetSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>>;

    /**
     * Returns a specific submodel element from the Submodel at a specified path
     */
    getSubmodelElementByPathSubmodelRepo(
        requestParameters: GetSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement>;

    /**
     *
     * @summary Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    getSubmodelElementByPathValueOnlySubmodelRepoRaw(
        requestParameters: GetSubmodelElementByPathValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElementValue>>;

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     */
    getSubmodelElementByPathValueOnlySubmodelRepo(
        requestParameters: GetSubmodelElementByPathValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElementValue>;

    /**
     *
     * @summary Asynchronously invokes an Operation at a specified path
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {OperationRequest} operationRequest Operation request object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    invokeOperationAsyncSubmodelRepoRaw(
        requestParameters: InvokeOperationAsyncSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    invokeOperationAsyncSubmodelRepo(
        requestParameters: InvokeOperationAsyncSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Asynchronously invokes an Operation at a specified path
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {OperationRequestValueOnly} operationRequestValueOnly Operation request object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    invokeOperationAsyncValueOnlySubmodelRepoRaw(
        requestParameters: InvokeOperationAsyncValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    invokeOperationAsyncValueOnlySubmodelRepo(
        requestParameters: InvokeOperationAsyncValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Synchronously invokes an Operation at a specified path
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {OperationRequest} operationRequest Operation request object
     * @param {boolean} [async] Determines whether an operation invocation is performed asynchronously or synchronously
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    invokeOperationSubmodelRepoRaw(
        requestParameters: InvokeOperationSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResult>>;

    /**
     * Synchronously invokes an Operation at a specified path
     */
    invokeOperationSubmodelRepo(
        requestParameters: InvokeOperationSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResult>;

    /**
     *
     * @summary Synchronously invokes an Operation at a specified path
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {OperationRequestValueOnly} operationRequestValueOnly Operation request object
     * @param {boolean} [async] Determines whether an operation invocation is performed asynchronously or synchronously
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    invokeOperationValueOnlySubmodelRepoRaw(
        requestParameters: InvokeOperationValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResultValueOnly>>;

    /**
     * Synchronously invokes an Operation at a specified path
     */
    invokeOperationValueOnlySubmodelRepo(
        requestParameters: InvokeOperationValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResultValueOnly>;

    /**
     *
     * @summary Updates an existing Submodel
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {Submodel} submodel Submodel object
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    patchSubmodelByIdRaw(
        requestParameters: PatchSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates an existing Submodel
     */
    patchSubmodelById(
        requestParameters: PatchSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the metadata attributes of an existing Submodel
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {SubmodelMetadata} submodelMetadata The metadata attributes of the Submodel object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    patchSubmodelByIdMetadataRaw(
        requestParameters: PatchSubmodelByIdMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the metadata attributes of an existing Submodel
     */
    patchSubmodelByIdMetadata(
        requestParameters: PatchSubmodelByIdMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the values of an existing Submodel
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {object} body Submodel object in its ValueOnly representation
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    patchSubmodelByIdValueOnlyRaw(
        requestParameters: PatchSubmodelByIdValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the values of an existing Submodel
     */
    patchSubmodelByIdValueOnly(
        requestParameters: PatchSubmodelByIdValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the metadata attributes an existing SubmodelElement
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {SubmodelElementMetadata} submodelElementMetadata Metadata attributes of the SubmodelElement
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    patchSubmodelElementByPathMetadataSubmodelRepoRaw(
        requestParameters: PatchSubmodelElementByPathMetadataSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the metadata attributes an existing SubmodelElement
     */
    patchSubmodelElementByPathMetadataSubmodelRepo(
        requestParameters: PatchSubmodelElementByPathMetadataSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates an existing SubmodelElement
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {SubmodelElement} submodelElement SubmodelElement object
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    patchSubmodelElementByPathSubmodelRepoRaw(
        requestParameters: PatchSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates an existing SubmodelElement
     */
    patchSubmodelElementByPathSubmodelRepo(
        requestParameters: PatchSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the value of an existing SubmodelElement
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {SubmodelElementValue} submodelElementValue The SubmodelElement in its ValueOnly representation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    patchSubmodelElementByPathValueOnlySubmodelRepoRaw(
        requestParameters: PatchSubmodelElementByPathValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the value of an existing SubmodelElement
     */
    patchSubmodelElementByPathValueOnlySubmodelRepo(
        requestParameters: PatchSubmodelElementByPathValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Creates a new Submodel
     * @param {Submodel} submodel Submodel object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    postSubmodelRaw(
        requestParameters: PostSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Submodel>>;

    /**
     * Creates a new Submodel
     */
    postSubmodel(
        requestParameters: PostSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Submodel>;

    /**
     *
     * @summary Creates a new submodel element at a specified path within submodel elements hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {SubmodelElement} submodelElement Requested submodel element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    postSubmodelElementByPathSubmodelRepoRaw(
        requestParameters: PostSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>>;

    /**
     * Creates a new submodel element at a specified path within submodel elements hierarchy
     */
    postSubmodelElementByPathSubmodelRepo(
        requestParameters: PostSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement>;

    /**
     *
     * @summary Creates a new submodel element
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {SubmodelElement} submodelElement Requested submodel element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    postSubmodelElementSubmodelRepositoryRaw(
        requestParameters: PostSubmodelElementSubmodelRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>>;

    /**
     * Creates a new submodel element
     */
    postSubmodelElementSubmodelRepository(
        requestParameters: PostSubmodelElementSubmodelRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement>;

    /**
     *
     * @summary Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} [fileName]
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    putFileByPathSubmodelRepoRaw(
        requestParameters: PutFileByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     */
    putFileByPathSubmodelRepo(
        requestParameters: PutFileByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates an existing Submodel
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {Submodel} submodel Submodel object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    putSubmodelByIdRaw(
        requestParameters: PutSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates an existing Submodel
     */
    putSubmodelById(
        requestParameters: PutSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates an existing submodel element at a specified path within submodel elements hierarchy
     * @param {string} submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {SubmodelElement} submodelElement Requested submodel element
     * @param {'deep'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelRepositoryAPIApiInterface
     */
    putSubmodelElementByPathSubmodelRepoRaw(
        requestParameters: PutSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates an existing submodel element at a specified path within submodel elements hierarchy
     */
    putSubmodelElementByPathSubmodelRepo(
        requestParameters: PutSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;
}

/**
 *
 */
export class SubmodelRepositoryAPIApi extends runtime.BaseAPI implements SubmodelRepositoryAPIApiInterface {
    /**
     * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     */
    async deleteFileByPathSubmodelRepoRaw(
        requestParameters: DeleteFileByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling deleteFileByPathSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling deleteFileByPathSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     */
    async deleteFileByPathSubmodelRepo(
        requestParameters: DeleteFileByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.deleteFileByPathSubmodelRepoRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a Submodel
     */
    async deleteSubmodelByIdRaw(
        requestParameters: DeleteSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling deleteSubmodelById().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a Submodel
     */
    async deleteSubmodelById(
        requestParameters: DeleteSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.deleteSubmodelByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a submodel element at a specified path within the submodel elements hierarchy
     */
    async deleteSubmodelElementByPathSubmodelRepoRaw(
        requestParameters: DeleteSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling deleteSubmodelElementByPathSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling deleteSubmodelElementByPathSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a submodel element at a specified path within the submodel elements hierarchy
     */
    async deleteSubmodelElementByPathSubmodelRepo(
        requestParameters: DeleteSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.deleteSubmodelElementByPathSubmodelRepoRaw(requestParameters, initOverrides);
    }

    /**
     * Returns the metadata attributes of all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsMetadataSubmodelRepositoryRaw(
        requestParameters: GetAllSubmodelElementsMetadataSubmodelRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsMetadataResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsMetadataSubmodelRepository().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/$metadata`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the metadata attributes of all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsMetadataSubmodelRepository(
        requestParameters: GetAllSubmodelElementsMetadataSubmodelRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsMetadataResult> {
        const response = await this.getAllSubmodelElementsMetadataSubmodelRepositoryRaw(
            requestParameters,
            initOverrides,
        );
        return await response.value();
    }

    /**
     * Returns all submodel elements including their hierarchy in the Path notation
     */
    async getAllSubmodelElementsPathSubmodelRepoRaw(
        requestParameters: GetAllSubmodelElementsPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetPathItemsResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsPathSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/$path`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements including their hierarchy in the Path notation
     */
    async getAllSubmodelElementsPathSubmodelRepo(
        requestParameters: GetAllSubmodelElementsPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetPathItemsResult> {
        const response = await this.getAllSubmodelElementsPathSubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the References of all submodel elements
     */
    async getAllSubmodelElementsReferenceSubmodelRepoRaw(
        requestParameters: GetAllSubmodelElementsReferenceSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetReferencesResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsReferenceSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/$reference`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the References of all submodel elements
     */
    async getAllSubmodelElementsReferenceSubmodelRepo(
        requestParameters: GetAllSubmodelElementsReferenceSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetReferencesResult> {
        const response = await this.getAllSubmodelElementsReferenceSubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsSubmodelRepositoryRaw(
        requestParameters: GetAllSubmodelElementsSubmodelRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsSubmodelRepository().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsSubmodelRepository(
        requestParameters: GetAllSubmodelElementsSubmodelRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsResult> {
        const response = await this.getAllSubmodelElementsSubmodelRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel elements including their hierarchy in the ValueOnly representation
     */
    async getAllSubmodelElementsValueOnlySubmodelRepoRaw(
        requestParameters: GetAllSubmodelElementsValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsValueResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getAllSubmodelElementsValueOnlySubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/$value`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements including their hierarchy in the ValueOnly representation
     */
    async getAllSubmodelElementsValueOnlySubmodelRepo(
        requestParameters: GetAllSubmodelElementsValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsValueResult> {
        const response = await this.getAllSubmodelElementsValueOnlySubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all Submodels
     */
    async getAllSubmodelsRaw(
        requestParameters: GetAllSubmodelsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelsResult>> {
        const queryParameters: any = {};

        if (requestParameters['semanticId'] != null) {
            queryParameters['semanticId'] = requestParameters['semanticId'];
        }

        if (requestParameters['idShort'] != null) {
            queryParameters['idShort'] = requestParameters['idShort'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all Submodels
     */
    async getAllSubmodels(
        requestParameters: GetAllSubmodelsRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelsResult> {
        const response = await this.getAllSubmodelsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the metadata attributes of all Submodels
     */
    async getAllSubmodelsMetadataRaw(
        requestParameters: GetAllSubmodelsMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelsMetadataResult>> {
        const queryParameters: any = {};

        if (requestParameters['semanticId'] != null) {
            queryParameters['semanticId'] = requestParameters['semanticId'];
        }

        if (requestParameters['idShort'] != null) {
            queryParameters['idShort'] = requestParameters['idShort'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/$metadata`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the metadata attributes of all Submodels
     */
    async getAllSubmodelsMetadata(
        requestParameters: GetAllSubmodelsMetadataRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelsMetadataResult> {
        const response = await this.getAllSubmodelsMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all Submodels in the Path notation
     */
    async getAllSubmodelsPathRaw(
        requestParameters: GetAllSubmodelsPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetPathItemsResult>> {
        const queryParameters: any = {};

        if (requestParameters['semanticId'] != null) {
            queryParameters['semanticId'] = requestParameters['semanticId'];
        }

        if (requestParameters['idShort'] != null) {
            queryParameters['idShort'] = requestParameters['idShort'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/$path`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all Submodels in the Path notation
     */
    async getAllSubmodelsPath(
        requestParameters: GetAllSubmodelsPathRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetPathItemsResult> {
        const response = await this.getAllSubmodelsPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the References for all Submodels
     */
    async getAllSubmodelsReferenceRaw(
        requestParameters: GetAllSubmodelsReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetReferencesResult>> {
        const queryParameters: any = {};

        if (requestParameters['semanticId'] != null) {
            queryParameters['semanticId'] = requestParameters['semanticId'];
        }

        if (requestParameters['idShort'] != null) {
            queryParameters['idShort'] = requestParameters['idShort'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/$reference`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the References for all Submodels
     */
    async getAllSubmodelsReference(
        requestParameters: GetAllSubmodelsReferenceRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetReferencesResult> {
        const response = await this.getAllSubmodelsReferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all Submodels in their ValueOnly representation
     */
    async getAllSubmodelsValueOnlyRaw(
        requestParameters: GetAllSubmodelsValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelsValueResult>> {
        const queryParameters: any = {};

        if (requestParameters['semanticId'] != null) {
            queryParameters['semanticId'] = requestParameters['semanticId'];
        }

        if (requestParameters['idShort'] != null) {
            queryParameters['idShort'] = requestParameters['idShort'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/$value`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all Submodels in their ValueOnly representation
     */
    async getAllSubmodelsValueOnly(
        requestParameters: GetAllSubmodelsValueOnlyRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelsValueResult> {
        const response = await this.getAllSubmodelsValueOnlyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads file content from a specific submodel element from the Submodel at a specified path
     */
    async getFileByPathSubmodelRepoRaw(
        requestParameters: GetFileByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getFileByPathSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getFileByPathSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads file content from a specific submodel element from the Submodel at a specified path
     */
    async getFileByPathSubmodelRepo(
        requestParameters: GetFileByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Blob> {
        const response = await this.getFileByPathSubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultSubmodelRepoRaw(
        requestParameters: GetOperationAsyncResultSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getOperationAsyncResultSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getOperationAsyncResultSubmodelRepo().',
            );
        }

        if (requestParameters['handleId'] == null) {
            throw new runtime.RequiredError(
                'handleId',
                'Required parameter "handleId" was null or undefined when calling getOperationAsyncResultSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath'])))
                    .replace(`{${'handleId'}}`, encodeURIComponent(String(requestParameters['handleId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultSubmodelRepo(
        requestParameters: GetOperationAsyncResultSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResult> {
        const response = await this.getOperationAsyncResultSubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultValueOnlySubmodelRepoRaw(
        requestParameters: GetOperationAsyncResultValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResultValueOnly>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getOperationAsyncResultValueOnlySubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getOperationAsyncResultValueOnlySubmodelRepo().',
            );
        }

        if (requestParameters['handleId'] == null) {
            throw new runtime.RequiredError(
                'handleId',
                'Required parameter "handleId" was null or undefined when calling getOperationAsyncResultValueOnlySubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-results/{handleId}/$value`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath'])))
                    .replace(`{${'handleId'}}`, encodeURIComponent(String(requestParameters['handleId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultValueOnlySubmodelRepo(
        requestParameters: GetOperationAsyncResultValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResultValueOnly> {
        const response = await this.getOperationAsyncResultValueOnlySubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Operation status of an asynchronous invoked Operation
     */
    async getOperationAsyncStatusSubmodelRepoRaw(
        requestParameters: GetOperationAsyncStatusSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getOperationAsyncStatusSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getOperationAsyncStatusSubmodelRepo().',
            );
        }

        if (requestParameters['handleId'] == null) {
            throw new runtime.RequiredError(
                'handleId',
                'Required parameter "handleId" was null or undefined when calling getOperationAsyncStatusSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/operation-status/{handleId}`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath'])))
                    .replace(`{${'handleId'}}`, encodeURIComponent(String(requestParameters['handleId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Operation status of an asynchronous invoked Operation
     */
    async getOperationAsyncStatusSubmodelRepo(
        requestParameters: GetOperationAsyncStatusSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResult> {
        const response = await this.getOperationAsyncStatusSubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific Submodel
     */
    async getSubmodelByIdRaw(
        requestParameters: GetSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Submodel>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelById().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific Submodel
     */
    async getSubmodelById(
        requestParameters: GetSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Submodel> {
        const response = await this.getSubmodelByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the metadata attributes of a specific Submodel
     */
    async getSubmodelByIdMetadataRaw(
        requestParameters: GetSubmodelByIdMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelMetadata>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelByIdMetadata().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/$metadata`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the metadata attributes of a specific Submodel
     */
    async getSubmodelByIdMetadata(
        requestParameters: GetSubmodelByIdMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelMetadata> {
        const response = await this.getSubmodelByIdMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific Submodel in the Path notation
     */
    async getSubmodelByIdPathRaw(
        requestParameters: GetSubmodelByIdPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelByIdPath().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/$path`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a specific Submodel in the Path notation
     */
    async getSubmodelByIdPath(
        requestParameters: GetSubmodelByIdPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<string>> {
        const response = await this.getSubmodelByIdPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Reference of a specific Submodel
     */
    async getSubmodelByIdReferenceRaw(
        requestParameters: GetSubmodelByIdReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelByIdReference().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/$reference`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Reference of a specific Submodel
     */
    async getSubmodelByIdReference(
        requestParameters: GetSubmodelByIdReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference> {
        const response = await this.getSubmodelByIdReferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific Submodel in the ValueOnly representation
     */
    async getSubmodelByIdValueOnlyRaw(
        requestParameters: GetSubmodelByIdValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelByIdValueOnly().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/$value`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a specific Submodel in the ValueOnly representation
     */
    async getSubmodelByIdValueOnly(
        requestParameters: GetSubmodelByIdValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object> {
        const response = await this.getSubmodelByIdValueOnlyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the matadata attributes of a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathMetadataSubmodelRepoRaw(
        requestParameters: GetSubmodelElementByPathMetadataSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElementMetadata>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathMetadataSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathMetadataSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the matadata attributes of a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathMetadataSubmodelRepo(
        requestParameters: GetSubmodelElementByPathMetadataSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElementMetadata> {
        const response = await this.getSubmodelElementByPathMetadataSubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the Path notation
     */
    async getSubmodelElementByPathPathSubmodelRepoRaw(
        requestParameters: GetSubmodelElementByPathPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathPathSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathPathSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$path`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the Path notation
     */
    async getSubmodelElementByPathPathSubmodelRepo(
        requestParameters: GetSubmodelElementByPathPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<string>> {
        const response = await this.getSubmodelElementByPathPathSubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Referene of a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathReferenceSubmodelRepoRaw(
        requestParameters: GetSubmodelElementByPathReferenceSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathReferenceSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathReferenceSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$reference`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Referene of a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathReferenceSubmodelRepo(
        requestParameters: GetSubmodelElementByPathReferenceSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference> {
        const response = await this.getSubmodelElementByPathReferenceSubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathSubmodelRepoRaw(
        requestParameters: GetSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathSubmodelRepo(
        requestParameters: GetSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement> {
        const response = await this.getSubmodelElementByPathSubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     */
    async getSubmodelElementByPathValueOnlySubmodelRepoRaw(
        requestParameters: GetSubmodelElementByPathValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElementValue>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling getSubmodelElementByPathValueOnlySubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathValueOnlySubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     */
    async getSubmodelElementByPathValueOnlySubmodelRepo(
        requestParameters: GetSubmodelElementByPathValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElementValue> {
        const response = await this.getSubmodelElementByPathValueOnlySubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncSubmodelRepoRaw(
        requestParameters: InvokeOperationAsyncSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling invokeOperationAsyncSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationAsyncSubmodelRepo().',
            );
        }

        if (requestParameters['operationRequest'] == null) {
            throw new runtime.RequiredError(
                'operationRequest',
                'Required parameter "operationRequest" was null or undefined when calling invokeOperationAsyncSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['operationRequest'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncSubmodelRepo(
        requestParameters: InvokeOperationAsyncSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.invokeOperationAsyncSubmodelRepoRaw(requestParameters, initOverrides);
    }

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncValueOnlySubmodelRepoRaw(
        requestParameters: InvokeOperationAsyncValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling invokeOperationAsyncValueOnlySubmodelRepo().',
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling invokeOperationAsyncValueOnlySubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationAsyncValueOnlySubmodelRepo().',
            );
        }

        if (requestParameters['operationRequestValueOnly'] == null) {
            throw new runtime.RequiredError(
                'operationRequestValueOnly',
                'Required parameter "operationRequestValueOnly" was null or undefined when calling invokeOperationAsyncValueOnlySubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke-async/$value`
                    .replace(`{${'aasIdentifier'}}`, encodeURIComponent(String(requestParameters['aasIdentifier'])))
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['operationRequestValueOnly'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncValueOnlySubmodelRepo(
        requestParameters: InvokeOperationAsyncValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.invokeOperationAsyncValueOnlySubmodelRepoRaw(requestParameters, initOverrides);
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationSubmodelRepoRaw(
        requestParameters: InvokeOperationSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling invokeOperationSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationSubmodelRepo().',
            );
        }

        if (requestParameters['operationRequest'] == null) {
            throw new runtime.RequiredError(
                'operationRequest',
                'Required parameter "operationRequest" was null or undefined when calling invokeOperationSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['async'] != null) {
            queryParameters['async'] = requestParameters['async'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['operationRequest'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationSubmodelRepo(
        requestParameters: InvokeOperationSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResult> {
        const response = await this.invokeOperationSubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationValueOnlySubmodelRepoRaw(
        requestParameters: InvokeOperationValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResultValueOnly>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling invokeOperationValueOnlySubmodelRepo().',
            );
        }

        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling invokeOperationValueOnlySubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationValueOnlySubmodelRepo().',
            );
        }

        if (requestParameters['operationRequestValueOnly'] == null) {
            throw new runtime.RequiredError(
                'operationRequestValueOnly',
                'Required parameter "operationRequestValueOnly" was null or undefined when calling invokeOperationValueOnlySubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['async'] != null) {
            queryParameters['async'] = requestParameters['async'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/invoke/$value`
                    .replace(`{${'aasIdentifier'}}`, encodeURIComponent(String(requestParameters['aasIdentifier'])))
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['operationRequestValueOnly'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationValueOnlySubmodelRepo(
        requestParameters: InvokeOperationValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResultValueOnly> {
        const response = await this.invokeOperationValueOnlySubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates an existing Submodel
     */
    async patchSubmodelByIdRaw(
        requestParameters: PatchSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelById().',
            );
        }

        if (requestParameters['submodel'] == null) {
            throw new runtime.RequiredError(
                'submodel',
                'Required parameter "submodel" was null or undefined when calling patchSubmodelById().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodel'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing Submodel
     */
    async patchSubmodelById(
        requestParameters: PatchSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the metadata attributes of an existing Submodel
     */
    async patchSubmodelByIdMetadataRaw(
        requestParameters: PatchSubmodelByIdMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelByIdMetadata().',
            );
        }

        if (requestParameters['submodelMetadata'] == null) {
            throw new runtime.RequiredError(
                'submodelMetadata',
                'Required parameter "submodelMetadata" was null or undefined when calling patchSubmodelByIdMetadata().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/$metadata`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelMetadata'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the metadata attributes of an existing Submodel
     */
    async patchSubmodelByIdMetadata(
        requestParameters: PatchSubmodelByIdMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelByIdMetadataRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the values of an existing Submodel
     */
    async patchSubmodelByIdValueOnlyRaw(
        requestParameters: PatchSubmodelByIdValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelByIdValueOnly().',
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchSubmodelByIdValueOnly().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/$value`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'] as any,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the values of an existing Submodel
     */
    async patchSubmodelByIdValueOnly(
        requestParameters: PatchSubmodelByIdValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelByIdValueOnlyRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the metadata attributes an existing SubmodelElement
     */
    async patchSubmodelElementByPathMetadataSubmodelRepoRaw(
        requestParameters: PatchSubmodelElementByPathMetadataSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelElementByPathMetadataSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling patchSubmodelElementByPathMetadataSubmodelRepo().',
            );
        }

        if (requestParameters['submodelElementMetadata'] == null) {
            throw new runtime.RequiredError(
                'submodelElementMetadata',
                'Required parameter "submodelElementMetadata" was null or undefined when calling patchSubmodelElementByPathMetadataSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$metadata`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElementMetadata'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the metadata attributes an existing SubmodelElement
     */
    async patchSubmodelElementByPathMetadataSubmodelRepo(
        requestParameters: PatchSubmodelElementByPathMetadataSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelElementByPathMetadataSubmodelRepoRaw(requestParameters, initOverrides);
    }

    /**
     * Updates an existing SubmodelElement
     */
    async patchSubmodelElementByPathSubmodelRepoRaw(
        requestParameters: PatchSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelElementByPathSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling patchSubmodelElementByPathSubmodelRepo().',
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling patchSubmodelElementByPathSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElement'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing SubmodelElement
     */
    async patchSubmodelElementByPathSubmodelRepo(
        requestParameters: PatchSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelElementByPathSubmodelRepoRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the value of an existing SubmodelElement
     */
    async patchSubmodelElementByPathValueOnlySubmodelRepoRaw(
        requestParameters: PatchSubmodelElementByPathValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling patchSubmodelElementByPathValueOnlySubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling patchSubmodelElementByPathValueOnlySubmodelRepo().',
            );
        }

        if (requestParameters['submodelElementValue'] == null) {
            throw new runtime.RequiredError(
                'submodelElementValue',
                'Required parameter "submodelElementValue" was null or undefined when calling patchSubmodelElementByPathValueOnlySubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/$value`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElementValue'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the value of an existing SubmodelElement
     */
    async patchSubmodelElementByPathValueOnlySubmodelRepo(
        requestParameters: PatchSubmodelElementByPathValueOnlySubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelElementByPathValueOnlySubmodelRepoRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new Submodel
     */
    async postSubmodelRaw(
        requestParameters: PostSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Submodel>> {
        if (requestParameters['submodel'] == null) {
            throw new runtime.RequiredError(
                'submodel',
                'Required parameter "submodel" was null or undefined when calling postSubmodel().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodel'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new Submodel
     */
    async postSubmodel(
        requestParameters: PostSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Submodel> {
        const response = await this.postSubmodelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new submodel element at a specified path within submodel elements hierarchy
     */
    async postSubmodelElementByPathSubmodelRepoRaw(
        requestParameters: PostSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling postSubmodelElementByPathSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling postSubmodelElementByPathSubmodelRepo().',
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling postSubmodelElementByPathSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElement'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new submodel element at a specified path within submodel elements hierarchy
     */
    async postSubmodelElementByPathSubmodelRepo(
        requestParameters: PostSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement> {
        const response = await this.postSubmodelElementByPathSubmodelRepoRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new submodel element
     */
    async postSubmodelElementSubmodelRepositoryRaw(
        requestParameters: PostSubmodelElementSubmodelRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling postSubmodelElementSubmodelRepository().',
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling postSubmodelElementSubmodelRepository().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElement'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new submodel element
     */
    async postSubmodelElementSubmodelRepository(
        requestParameters: PostSubmodelElementSubmodelRepositoryRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement> {
        const response = await this.postSubmodelElementSubmodelRepositoryRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putFileByPathSubmodelRepoRaw(
        requestParameters: PutFileByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling putFileByPathSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling putFileByPathSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('fileName', requestParameters['fileName'] as any);
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}/attachment`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putFileByPathSubmodelRepo(
        requestParameters: PutFileByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.putFileByPathSubmodelRepoRaw(requestParameters, initOverrides);
    }

    /**
     * Updates an existing Submodel
     */
    async putSubmodelByIdRaw(
        requestParameters: PutSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling putSubmodelById().',
            );
        }

        if (requestParameters['submodel'] == null) {
            throw new runtime.RequiredError(
                'submodel',
                'Required parameter "submodel" was null or undefined when calling putSubmodelById().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}`.replace(
                    `{${'submodelIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                ),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodel'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing Submodel
     */
    async putSubmodelById(
        requestParameters: PutSubmodelByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.putSubmodelByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Updates an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putSubmodelElementByPathSubmodelRepoRaw(
        requestParameters: PutSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelIdentifier'] == null) {
            throw new runtime.RequiredError(
                'submodelIdentifier',
                'Required parameter "submodelIdentifier" was null or undefined when calling putSubmodelElementByPathSubmodelRepo().',
            );
        }

        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling putSubmodelElementByPathSubmodelRepo().',
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling putSubmodelElementByPathSubmodelRepo().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodels/{submodelIdentifier}/submodel-elements/{idShortPath}`
                    .replace(
                        `{${'submodelIdentifier'}}`,
                        encodeURIComponent(String(requestParameters['submodelIdentifier'])),
                    )
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath']))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElement'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putSubmodelElementByPathSubmodelRepo(
        requestParameters: PutSubmodelElementByPathSubmodelRepoRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.putSubmodelElementByPathSubmodelRepoRaw(requestParameters, initOverrides);
    }
}

/**
 * @export
 */
export const GetAllSubmodelElementsPathSubmodelRepoLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetAllSubmodelElementsPathSubmodelRepoLevelEnum =
    (typeof GetAllSubmodelElementsPathSubmodelRepoLevelEnum)[keyof typeof GetAllSubmodelElementsPathSubmodelRepoLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsReferenceSubmodelRepoLevelEnum = {
    Core: 'core',
} as const;
export type GetAllSubmodelElementsReferenceSubmodelRepoLevelEnum =
    (typeof GetAllSubmodelElementsReferenceSubmodelRepoLevelEnum)[keyof typeof GetAllSubmodelElementsReferenceSubmodelRepoLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsSubmodelRepositoryLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetAllSubmodelElementsSubmodelRepositoryLevelEnum =
    (typeof GetAllSubmodelElementsSubmodelRepositoryLevelEnum)[keyof typeof GetAllSubmodelElementsSubmodelRepositoryLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsSubmodelRepositoryExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetAllSubmodelElementsSubmodelRepositoryExtentEnum =
    (typeof GetAllSubmodelElementsSubmodelRepositoryExtentEnum)[keyof typeof GetAllSubmodelElementsSubmodelRepositoryExtentEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsValueOnlySubmodelRepoLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetAllSubmodelElementsValueOnlySubmodelRepoLevelEnum =
    (typeof GetAllSubmodelElementsValueOnlySubmodelRepoLevelEnum)[keyof typeof GetAllSubmodelElementsValueOnlySubmodelRepoLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsValueOnlySubmodelRepoExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetAllSubmodelElementsValueOnlySubmodelRepoExtentEnum =
    (typeof GetAllSubmodelElementsValueOnlySubmodelRepoExtentEnum)[keyof typeof GetAllSubmodelElementsValueOnlySubmodelRepoExtentEnum];
/**
 * @export
 */
export const GetAllSubmodelsLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetAllSubmodelsLevelEnum = (typeof GetAllSubmodelsLevelEnum)[keyof typeof GetAllSubmodelsLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelsExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetAllSubmodelsExtentEnum = (typeof GetAllSubmodelsExtentEnum)[keyof typeof GetAllSubmodelsExtentEnum];
/**
 * @export
 */
export const GetAllSubmodelsPathLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetAllSubmodelsPathLevelEnum =
    (typeof GetAllSubmodelsPathLevelEnum)[keyof typeof GetAllSubmodelsPathLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelsReferenceLevelEnum = {
    Core: 'core',
} as const;
export type GetAllSubmodelsReferenceLevelEnum =
    (typeof GetAllSubmodelsReferenceLevelEnum)[keyof typeof GetAllSubmodelsReferenceLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelsValueOnlyLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetAllSubmodelsValueOnlyLevelEnum =
    (typeof GetAllSubmodelsValueOnlyLevelEnum)[keyof typeof GetAllSubmodelsValueOnlyLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelsValueOnlyExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetAllSubmodelsValueOnlyExtentEnum =
    (typeof GetAllSubmodelsValueOnlyExtentEnum)[keyof typeof GetAllSubmodelsValueOnlyExtentEnum];
/**
 * @export
 */
export const GetSubmodelByIdLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelByIdLevelEnum = (typeof GetSubmodelByIdLevelEnum)[keyof typeof GetSubmodelByIdLevelEnum];
/**
 * @export
 */
export const GetSubmodelByIdExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetSubmodelByIdExtentEnum = (typeof GetSubmodelByIdExtentEnum)[keyof typeof GetSubmodelByIdExtentEnum];
/**
 * @export
 */
export const GetSubmodelByIdPathLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelByIdPathLevelEnum =
    (typeof GetSubmodelByIdPathLevelEnum)[keyof typeof GetSubmodelByIdPathLevelEnum];
/**
 * @export
 */
export const GetSubmodelByIdValueOnlyLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelByIdValueOnlyLevelEnum =
    (typeof GetSubmodelByIdValueOnlyLevelEnum)[keyof typeof GetSubmodelByIdValueOnlyLevelEnum];
/**
 * @export
 */
export const GetSubmodelByIdValueOnlyExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetSubmodelByIdValueOnlyExtentEnum =
    (typeof GetSubmodelByIdValueOnlyExtentEnum)[keyof typeof GetSubmodelByIdValueOnlyExtentEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathPathSubmodelRepoLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelElementByPathPathSubmodelRepoLevelEnum =
    (typeof GetSubmodelElementByPathPathSubmodelRepoLevelEnum)[keyof typeof GetSubmodelElementByPathPathSubmodelRepoLevelEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathSubmodelRepoLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelElementByPathSubmodelRepoLevelEnum =
    (typeof GetSubmodelElementByPathSubmodelRepoLevelEnum)[keyof typeof GetSubmodelElementByPathSubmodelRepoLevelEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathSubmodelRepoExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetSubmodelElementByPathSubmodelRepoExtentEnum =
    (typeof GetSubmodelElementByPathSubmodelRepoExtentEnum)[keyof typeof GetSubmodelElementByPathSubmodelRepoExtentEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathValueOnlySubmodelRepoLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelElementByPathValueOnlySubmodelRepoLevelEnum =
    (typeof GetSubmodelElementByPathValueOnlySubmodelRepoLevelEnum)[keyof typeof GetSubmodelElementByPathValueOnlySubmodelRepoLevelEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathValueOnlySubmodelRepoExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetSubmodelElementByPathValueOnlySubmodelRepoExtentEnum =
    (typeof GetSubmodelElementByPathValueOnlySubmodelRepoExtentEnum)[keyof typeof GetSubmodelElementByPathValueOnlySubmodelRepoExtentEnum];
/**
 * @export
 */
export const PatchSubmodelByIdLevelEnum = {
    Core: 'core',
} as const;
export type PatchSubmodelByIdLevelEnum = (typeof PatchSubmodelByIdLevelEnum)[keyof typeof PatchSubmodelByIdLevelEnum];
/**
 * @export
 */
export const PatchSubmodelByIdValueOnlyLevelEnum = {
    Core: 'core',
} as const;
export type PatchSubmodelByIdValueOnlyLevelEnum =
    (typeof PatchSubmodelByIdValueOnlyLevelEnum)[keyof typeof PatchSubmodelByIdValueOnlyLevelEnum];
/**
 * @export
 */
export const PatchSubmodelElementByPathSubmodelRepoLevelEnum = {
    Core: 'core',
} as const;
export type PatchSubmodelElementByPathSubmodelRepoLevelEnum =
    (typeof PatchSubmodelElementByPathSubmodelRepoLevelEnum)[keyof typeof PatchSubmodelElementByPathSubmodelRepoLevelEnum];
/**
 * @export
 */
export const PutSubmodelElementByPathSubmodelRepoLevelEnum = {
    Deep: 'deep',
} as const;
export type PutSubmodelElementByPathSubmodelRepoLevelEnum =
    (typeof PutSubmodelElementByPathSubmodelRepoLevelEnum)[keyof typeof PutSubmodelElementByPathSubmodelRepoLevelEnum];
