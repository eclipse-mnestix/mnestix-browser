/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Entire API Collection
 * All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"
 *
 * The version of the OpenAPI document: V3.0.4
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type { GetAllAssetAdministrationShellIdsByAssetLink200Response, Result, SpecificAssetId } from '../models/index';

export interface DeleteAllAssetLinksByIdRequest {
    aasIdentifier: string;
}

export interface GetAllAssetAdministrationShellIdsByAssetLinkRequest {
    assetIds?: Array<string>;
    limit?: number;
    cursor?: string;
}

export interface GetAllAssetLinksByIdRequest {
    aasIdentifier: string;
}

export interface PostAllAssetLinksByIdRequest {
    aasIdentifier: string;
    specificAssetId: Array<SpecificAssetId>;
}

/**
 * AssetAdministrationShellBasicDiscoveryAPIApi - interface
 *
 * @export
 * @interface AssetAdministrationShellBasicDiscoveryAPIApiInterface
 */
export interface AssetAdministrationShellBasicDiscoveryAPIApiInterface {
    /**
     *
     * @summary Deletes all specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellBasicDiscoveryAPIApiInterface
     */
    deleteAllAssetLinksByIdRaw(
        requestParameters: DeleteAllAssetLinksByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes all specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
     */
    deleteAllAssetLinksById(
        requestParameters: DeleteAllAssetLinksByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Returns a list of Asset Administration Shell ids linked to specific Asset identifiers
     * @param {Array<string>} [assetIds] A list of specific Asset identifiers. Every single value asset identifier is a base64-url-encoded [SpecificAssetId](https://api.swaggerhub.com/domains/Plattform_i40/Part1-MetaModel-Schemas/V3.0.4#/components/schemas/SpecificAssetId).
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellBasicDiscoveryAPIApiInterface
     */
    getAllAssetAdministrationShellIdsByAssetLinkRaw(
        requestParameters: GetAllAssetAdministrationShellIdsByAssetLinkRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetAllAssetAdministrationShellIdsByAssetLink200Response>>;

    /**
     * Returns a list of Asset Administration Shell ids linked to specific Asset identifiers
     */
    getAllAssetAdministrationShellIdsByAssetLink(
        requestParameters: GetAllAssetAdministrationShellIdsByAssetLinkRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetAllAssetAdministrationShellIdsByAssetLink200Response>;

    /**
     *
     * @summary Returns a list of specific Asset identifiers based on an Asset Administration Shell id to edit discoverable content
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellBasicDiscoveryAPIApiInterface
     */
    getAllAssetLinksByIdRaw(
        requestParameters: GetAllAssetLinksByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<SpecificAssetId>>>;

    /**
     * Returns a list of specific Asset identifiers based on an Asset Administration Shell id to edit discoverable content
     */
    getAllAssetLinksById(
        requestParameters: GetAllAssetLinksByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<SpecificAssetId>>;

    /**
     *
     * @summary Creates specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
     * @param {string} aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param {Array<SpecificAssetId>} specificAssetId A list of specific Asset identifiers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetAdministrationShellBasicDiscoveryAPIApiInterface
     */
    postAllAssetLinksByIdRaw(
        requestParameters: PostAllAssetLinksByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<SpecificAssetId>>>;

    /**
     * Creates specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
     */
    postAllAssetLinksById(
        requestParameters: PostAllAssetLinksByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<SpecificAssetId>>;
}

/**
 *
 */
export class AssetAdministrationShellBasicDiscoveryAPIApi
    extends runtime.BaseAPI
    implements AssetAdministrationShellBasicDiscoveryAPIApiInterface
{
    /**
     * Deletes all specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
     */
    async deleteAllAssetLinksByIdRaw(
        requestParameters: DeleteAllAssetLinksByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling deleteAllAssetLinksById().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/lookup/shells/{aasIdentifier}`.replace(
                    `{${'aasIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['aasIdentifier'])),
                ),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes all specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
     */
    async deleteAllAssetLinksById(
        requestParameters: DeleteAllAssetLinksByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.deleteAllAssetLinksByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Returns a list of Asset Administration Shell ids linked to specific Asset identifiers
     */
    async getAllAssetAdministrationShellIdsByAssetLinkRaw(
        requestParameters: GetAllAssetAdministrationShellIdsByAssetLinkRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetAllAssetAdministrationShellIdsByAssetLink200Response>> {
        const queryParameters: any = {};

        if (requestParameters['assetIds'] != null) {
            queryParameters['assetIds'] = requestParameters['assetIds'];
        }

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/lookup/shells`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of Asset Administration Shell ids linked to specific Asset identifiers
     */
    async getAllAssetAdministrationShellIdsByAssetLink(
        requestParameters: GetAllAssetAdministrationShellIdsByAssetLinkRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetAllAssetAdministrationShellIdsByAssetLink200Response> {
        const response = await this.getAllAssetAdministrationShellIdsByAssetLinkRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a list of specific Asset identifiers based on an Asset Administration Shell id to edit discoverable content
     */
    async getAllAssetLinksByIdRaw(
        requestParameters: GetAllAssetLinksByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<SpecificAssetId>>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling getAllAssetLinksById().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/lookup/shells/{aasIdentifier}`.replace(
                    `{${'aasIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['aasIdentifier'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a list of specific Asset identifiers based on an Asset Administration Shell id to edit discoverable content
     */
    async getAllAssetLinksById(
        requestParameters: GetAllAssetLinksByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<SpecificAssetId>> {
        const response = await this.getAllAssetLinksByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
     */
    async postAllAssetLinksByIdRaw(
        requestParameters: PostAllAssetLinksByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<SpecificAssetId>>> {
        if (requestParameters['aasIdentifier'] == null) {
            throw new runtime.RequiredError(
                'aasIdentifier',
                'Required parameter "aasIdentifier" was null or undefined when calling postAllAssetLinksById().',
            );
        }

        if (requestParameters['specificAssetId'] == null) {
            throw new runtime.RequiredError(
                'specificAssetId',
                'Required parameter "specificAssetId" was null or undefined when calling postAllAssetLinksById().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/lookup/shells/{aasIdentifier}`.replace(
                    `{${'aasIdentifier'}}`,
                    encodeURIComponent(String(requestParameters['aasIdentifier'])),
                ),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['specificAssetId'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates specific Asset identifiers linked to an Asset Administration Shell to edit discoverable content
     */
    async postAllAssetLinksById(
        requestParameters: PostAllAssetLinksByIdRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<SpecificAssetId>> {
        const response = await this.postAllAssetLinksByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
