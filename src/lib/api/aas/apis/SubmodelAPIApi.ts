/* tslint:disable */
/* eslint-disable */
/**
 * DotAAS Part 2 | HTTP/REST | Entire API Collection
 * All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"
 *
 * The version of the OpenAPI document: V3.0.4
 * Contact: info@idtwin.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from '../runtime';
import type {
    BaseOperationResult,
    GetPathItemsResult,
    GetReferencesResult,
    GetSubmodelElementsMetadataResult,
    GetSubmodelElementsResult,
    GetSubmodelElementsValueResult,
    OperationRequest,
    OperationRequestValueOnly,
    OperationResult,
    OperationResultValueOnly,
    Reference,
    Result,
    Submodel,
    SubmodelElement,
    SubmodelElementMetadata,
    SubmodelElementValue,
    SubmodelMetadata,
} from '../models/index';

export interface DeleteFileByPathRequest {
    idShortPath: string;
}

export interface DeleteSubmodelElementByPathRequest {
    idShortPath: string;
}

export interface GetAllSubmodelElementsRequest {
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsLevelEnum;
    extent?: GetAllSubmodelElementsExtentEnum;
}

export interface GetAllSubmodelElementsMetadataRequest {
    limit?: number;
    cursor?: string;
}

export interface GetAllSubmodelElementsPathRequest {
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsPathLevelEnum;
}

export interface GetAllSubmodelElementsReferenceRequest {
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsReferenceLevelEnum;
}

export interface GetAllSubmodelElementsValueOnlyRequest {
    limit?: number;
    cursor?: string;
    level?: GetAllSubmodelElementsValueOnlyLevelEnum;
    extent?: GetAllSubmodelElementsValueOnlyExtentEnum;
}

export interface GetFileByPathRequest {
    idShortPath: string;
}

export interface GetOperationAsyncResultRequest {
    idShortPath: string;
    handleId: string;
}

export interface GetOperationAsyncResultValueOnlyRequest {
    idShortPath: string;
    handleId: string;
}

export interface GetOperationAsyncStatusRequest {
    idShortPath: string;
    handleId: string;
}

export interface GetSubmodelRequest {
    level?: GetSubmodelLevelEnum;
    extent?: GetSubmodelExtentEnum;
}

export interface GetSubmodelElementByPathRequest {
    idShortPath: string;
    level?: GetSubmodelElementByPathLevelEnum;
    extent?: GetSubmodelElementByPathExtentEnum;
}

export interface GetSubmodelElementByPathMetadataRequest {
    idShortPath: string;
}

export interface GetSubmodelElementByPathPathRequest {
    idShortPath: string;
    level?: GetSubmodelElementByPathPathLevelEnum;
}

export interface GetSubmodelElementByPathReferenceRequest {
    idShortPath: string;
}

export interface GetSubmodelElementByPathValueOnlyRequest {
    idShortPath: string;
    level?: GetSubmodelElementByPathValueOnlyLevelEnum;
    extent?: GetSubmodelElementByPathValueOnlyExtentEnum;
}

export interface GetSubmodelPathRequest {
    level?: GetSubmodelPathLevelEnum;
}

export interface GetSubmodelReferenceRequest {
    level?: GetSubmodelReferenceLevelEnum;
}

export interface GetSubmodelValueOnlyRequest {
    level?: GetSubmodelValueOnlyLevelEnum;
    extent?: GetSubmodelValueOnlyExtentEnum;
}

export interface InvokeOperationRequest {
    idShortPath: string;
    operationRequest: OperationRequest;
}

export interface InvokeOperationAsyncRequest {
    idShortPath: string;
    operationRequest: OperationRequest;
}

export interface InvokeOperationAsyncValueOnlyRequest {
    idShortPath: string;
    operationRequestValueOnly: OperationRequestValueOnly;
}

export interface InvokeOperationSyncValueOnlyRequest {
    idShortPath: string;
    operationRequestValueOnly: OperationRequestValueOnly;
}

export interface PatchSubmodelRequest {
    submodel: Submodel;
    level?: PatchSubmodelLevelEnum;
}

export interface PatchSubmodelElementByPathRequest {
    idShortPath: string;
    submodelElement: SubmodelElement;
    level?: PatchSubmodelElementByPathLevelEnum;
}

export interface PatchSubmodelElementByPathMetadataRequest {
    idShortPath: string;
    getSubmodelElementsMetadataResult: GetSubmodelElementsMetadataResult;
    limit?: number;
    cursor?: string;
}

export interface PatchSubmodelElementByPathValueOnlyRequest {
    idShortPath: string;
    getSubmodelElementsValueResult: GetSubmodelElementsValueResult;
    limit?: number;
    cursor?: string;
    level?: PatchSubmodelElementByPathValueOnlyLevelEnum;
}

export interface PatchSubmodelMetadataRequest {
    submodelMetadata: SubmodelMetadata;
}

export interface PatchSubmodelValueOnlyRequest {
    body: object;
    level?: PatchSubmodelValueOnlyLevelEnum;
}

export interface PostSubmodelElementRequest {
    submodelElement: SubmodelElement;
}

export interface PostSubmodelElementByPathRequest {
    idShortPath: string;
    submodelElement: SubmodelElement;
}

export interface PutFileByPathRequest {
    idShortPath: string;
    fileName?: string;
    file?: Blob;
}

export interface PutSubmodelRequest {
    submodel: Submodel;
    level?: PutSubmodelLevelEnum;
}

export interface PutSubmodelElementByPathRequest {
    idShortPath: string;
    submodelElement: SubmodelElement;
    level?: PutSubmodelElementByPathLevelEnum;
}

/**
 * SubmodelAPIApi - interface
 *
 * @export
 * @interface SubmodelAPIApiInterface
 */
export interface SubmodelAPIApiInterface {
    /**
     *
     * @summary Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    deleteFileByPathRaw(
        requestParameters: DeleteFileByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     */
    deleteFileByPath(
        requestParameters: DeleteFileByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Deletes a submodel element at a specified path within the submodel elements hierarchy
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    deleteSubmodelElementByPathRaw(
        requestParameters: DeleteSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Deletes a submodel element at a specified path within the submodel elements hierarchy
     */
    deleteSubmodelElementByPath(
        requestParameters: DeleteSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Returns all submodel elements including their hierarchy
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getAllSubmodelElementsRaw(
        requestParameters: GetAllSubmodelElementsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsResult>>;

    /**
     * Returns all submodel elements including their hierarchy
     */
    getAllSubmodelElements(
        requestParameters: GetAllSubmodelElementsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsResult>;

    /**
     *
     * @summary Returns the metadata attributes of all submodel elements including their hierarchy
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getAllSubmodelElementsMetadataRaw(
        requestParameters: GetAllSubmodelElementsMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsMetadataResult>>;

    /**
     * Returns the metadata attributes of all submodel elements including their hierarchy
     */
    getAllSubmodelElementsMetadata(
        requestParameters: GetAllSubmodelElementsMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsMetadataResult>;

    /**
     *
     * @summary Returns all submodel elements including their hierarchy in the Path notation
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getAllSubmodelElementsPathRaw(
        requestParameters: GetAllSubmodelElementsPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetPathItemsResult>>;

    /**
     * Returns all submodel elements including their hierarchy in the Path notation
     */
    getAllSubmodelElementsPath(
        requestParameters: GetAllSubmodelElementsPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetPathItemsResult>;

    /**
     *
     * @summary Returns the References of all submodel elements
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getAllSubmodelElementsReferenceRaw(
        requestParameters: GetAllSubmodelElementsReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetReferencesResult>>;

    /**
     * Returns the References of all submodel elements
     */
    getAllSubmodelElementsReference(
        requestParameters: GetAllSubmodelElementsReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetReferencesResult>;

    /**
     *
     * @summary Returns all submodel elements including their hierarchy in the ValueOnly representation
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getAllSubmodelElementsValueOnlyRaw(
        requestParameters: GetAllSubmodelElementsValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsValueResult>>;

    /**
     * Returns all submodel elements including their hierarchy in the ValueOnly representation
     */
    getAllSubmodelElementsValueOnly(
        requestParameters: GetAllSubmodelElementsValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsValueResult>;

    /**
     *
     * @summary Downloads file content from a specific submodel element from the Submodel at a specified path
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getFileByPathRaw(
        requestParameters: GetFileByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Blob>>;

    /**
     * Downloads file content from a specific submodel element from the Submodel at a specified path
     */
    getFileByPath(
        requestParameters: GetFileByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Blob>;

    /**
     *
     * @summary Returns the Operation result of an asynchronous invoked Operation
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getOperationAsyncResultRaw(
        requestParameters: GetOperationAsyncResultRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResult>>;

    /**
     * Returns the Operation result of an asynchronous invoked Operation
     */
    getOperationAsyncResult(
        requestParameters: GetOperationAsyncResultRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResult>;

    /**
     *
     * @summary Returns the value of the Operation result of an asynchronous invoked Operation
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getOperationAsyncResultValueOnlyRaw(
        requestParameters: GetOperationAsyncResultValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResultValueOnly>>;

    /**
     * Returns the value of the Operation result of an asynchronous invoked Operation
     */
    getOperationAsyncResultValueOnly(
        requestParameters: GetOperationAsyncResultValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResultValueOnly>;

    /**
     *
     * @summary Returns the Operation status of an asynchronous invoked Operation
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} handleId The returned handle id of an operation’s asynchronous invocation used to request the current state of the operation’s execution (UTF8-BASE64-URL-encoded)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getOperationAsyncStatusRaw(
        requestParameters: GetOperationAsyncStatusRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<BaseOperationResult>>;

    /**
     * Returns the Operation status of an asynchronous invoked Operation
     */
    getOperationAsyncStatus(
        requestParameters: GetOperationAsyncStatusRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<BaseOperationResult>;

    /**
     *
     * @summary Returns the Submodel
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getSubmodelRaw(
        requestParameters: GetSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Submodel>>;

    /**
     * Returns the Submodel
     */
    getSubmodel(
        requestParameters: GetSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Submodel>;

    /**
     *
     * @summary Returns a specific submodel element from the Submodel at a specified path
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getSubmodelElementByPathRaw(
        requestParameters: GetSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>>;

    /**
     * Returns a specific submodel element from the Submodel at a specified path
     */
    getSubmodelElementByPath(
        requestParameters: GetSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement>;

    /**
     *
     * @summary Returns the matadata attributes of a specific submodel element from the Submodel at a specified path
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getSubmodelElementByPathMetadataRaw(
        requestParameters: GetSubmodelElementByPathMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElementMetadata>>;

    /**
     * Returns the matadata attributes of a specific submodel element from the Submodel at a specified path
     */
    getSubmodelElementByPathMetadata(
        requestParameters: GetSubmodelElementByPathMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElementMetadata>;

    /**
     *
     * @summary Returns a specific submodel element from the Submodel at a specified path in the Path notation
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getSubmodelElementByPathPathRaw(
        requestParameters: GetSubmodelElementByPathPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the Path notation
     */
    getSubmodelElementByPathPath(
        requestParameters: GetSubmodelElementByPathPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<string>>;

    /**
     *
     * @summary Returns the Referene of a specific submodel element from the Submodel at a specified path
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getSubmodelElementByPathReferenceRaw(
        requestParameters: GetSubmodelElementByPathReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>>;

    /**
     * Returns the Referene of a specific submodel element from the Submodel at a specified path
     */
    getSubmodelElementByPathReference(
        requestParameters: GetSubmodelElementByPathReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference>;

    /**
     *
     * @summary Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getSubmodelElementByPathValueOnlyRaw(
        requestParameters: GetSubmodelElementByPathValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElementValue>>;

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     */
    getSubmodelElementByPathValueOnly(
        requestParameters: GetSubmodelElementByPathValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElementValue>;

    /**
     *
     * @summary Returns the metadata attributes of a specific Submodel
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getSubmodelMetadataRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelMetadata>>;

    /**
     * Returns the metadata attributes of a specific Submodel
     */
    getSubmodelMetadata(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelMetadata>;

    /**
     *
     * @summary Returns the Submodel in the Path notation
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getSubmodelPathRaw(
        requestParameters: GetSubmodelPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<string>>>;

    /**
     * Returns the Submodel in the Path notation
     */
    getSubmodelPath(
        requestParameters: GetSubmodelPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<string>>;

    /**
     *
     * @summary Returns the Reference of the Submodel
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getSubmodelReferenceRaw(
        requestParameters: GetSubmodelReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>>;

    /**
     * Returns the Reference of the Submodel
     */
    getSubmodelReference(
        requestParameters: GetSubmodelReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference>;

    /**
     *
     * @summary Returns the Submodel in the ValueOnly representation
     * @param {'deep' | 'core'} [level] Determines the structural depth of the respective resource content
     * @param {'withBlobValue' | 'withoutBlobValue'} [extent] Determines to which extent the resource is being serialized
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    getSubmodelValueOnlyRaw(
        requestParameters: GetSubmodelValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>>;

    /**
     * Returns the Submodel in the ValueOnly representation
     */
    getSubmodelValueOnly(
        requestParameters: GetSubmodelValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object>;

    /**
     *
     * @summary Synchronously invokes an Operation at a specified path
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {OperationRequest} operationRequest Operation request object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    invokeOperationRaw(
        requestParameters: InvokeOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResult>>;

    /**
     * Synchronously invokes an Operation at a specified path
     */
    invokeOperation(
        requestParameters: InvokeOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResult>;

    /**
     *
     * @summary Asynchronously invokes an Operation at a specified path
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {OperationRequest} operationRequest Operation request object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    invokeOperationAsyncRaw(
        requestParameters: InvokeOperationAsyncRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    invokeOperationAsync(
        requestParameters: InvokeOperationAsyncRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Asynchronously invokes an Operation at a specified path
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {OperationRequestValueOnly} operationRequestValueOnly Operation request object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    invokeOperationAsyncValueOnlyRaw(
        requestParameters: InvokeOperationAsyncValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    invokeOperationAsyncValueOnly(
        requestParameters: InvokeOperationAsyncValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Synchronously invokes an Operation at a specified path
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {OperationRequestValueOnly} operationRequestValueOnly Operation request object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    invokeOperationSyncValueOnlyRaw(
        requestParameters: InvokeOperationSyncValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResultValueOnly>>;

    /**
     * Synchronously invokes an Operation at a specified path
     */
    invokeOperationSyncValueOnly(
        requestParameters: InvokeOperationSyncValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResultValueOnly>;

    /**
     *
     * @summary Updates the Submodel
     * @param {Submodel} submodel Submodel object
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    patchSubmodelRaw(
        requestParameters: PatchSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the Submodel
     */
    patchSubmodel(
        requestParameters: PatchSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates an existing SubmodelElement
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {SubmodelElement} submodelElement SubmodelElement object
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    patchSubmodelElementByPathRaw(
        requestParameters: PatchSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates an existing SubmodelElement
     */
    patchSubmodelElementByPath(
        requestParameters: PatchSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the metadata attributes an existing SubmodelElement
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {GetSubmodelElementsMetadataResult} getSubmodelElementsMetadataResult Metadata attributes of the SubmodelElement
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    patchSubmodelElementByPathMetadataRaw(
        requestParameters: PatchSubmodelElementByPathMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the metadata attributes an existing SubmodelElement
     */
    patchSubmodelElementByPathMetadata(
        requestParameters: PatchSubmodelElementByPathMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the value of an existing SubmodelElement
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {GetSubmodelElementsValueResult} getSubmodelElementsValueResult The SubmodelElement in its ValueOnly representation
     * @param {number} [limit] The maximum number of elements in the response array
     * @param {string} [cursor] A server-generated identifier retrieved from pagingMetadata that specifies from which position the result listing should continue
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    patchSubmodelElementByPathValueOnlyRaw(
        requestParameters: PatchSubmodelElementByPathValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the value of an existing SubmodelElement
     */
    patchSubmodelElementByPathValueOnly(
        requestParameters: PatchSubmodelElementByPathValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the metadata attributes of the Submodel
     * @param {SubmodelMetadata} submodelMetadata The metadata attributes of the Submodel object
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    patchSubmodelMetadataRaw(
        requestParameters: PatchSubmodelMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the metadata attributes of the Submodel
     */
    patchSubmodelMetadata(
        requestParameters: PatchSubmodelMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the values of the Submodel
     * @param {object} body Submodel object in its ValueOnly representation
     * @param {'core'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    patchSubmodelValueOnlyRaw(
        requestParameters: PatchSubmodelValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the values of the Submodel
     */
    patchSubmodelValueOnly(
        requestParameters: PatchSubmodelValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Creates a new submodel element
     * @param {SubmodelElement} submodelElement Requested submodel element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    postSubmodelElementRaw(
        requestParameters: PostSubmodelElementRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>>;

    /**
     * Creates a new submodel element
     */
    postSubmodelElement(
        requestParameters: PostSubmodelElementRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement>;

    /**
     *
     * @summary Creates a new submodel element at a specified path within submodel elements hierarchy
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {SubmodelElement} submodelElement Requested submodel element
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    postSubmodelElementByPathRaw(
        requestParameters: PostSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>>;

    /**
     * Creates a new submodel element at a specified path within submodel elements hierarchy
     */
    postSubmodelElementByPath(
        requestParameters: PostSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement>;

    /**
     *
     * @summary Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {string} [fileName]
     * @param {Blob} [file]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    putFileByPathRaw(
        requestParameters: PutFileByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     */
    putFileByPath(
        requestParameters: PutFileByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates the Submodel
     * @param {Submodel} submodel Submodel object
     * @param {'deep'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    putSubmodelRaw(
        requestParameters: PutSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates the Submodel
     */
    putSubmodel(
        requestParameters: PutSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;

    /**
     *
     * @summary Updates an existing submodel element at a specified path within submodel elements hierarchy
     * @param {string} idShortPath IdShort path to the submodel element (dot-separated)
     * @param {SubmodelElement} submodelElement Requested submodel element
     * @param {'deep'} [level] Determines the structural depth of the respective resource content
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubmodelAPIApiInterface
     */
    putSubmodelElementByPathRaw(
        requestParameters: PutSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>>;

    /**
     * Updates an existing submodel element at a specified path within submodel elements hierarchy
     */
    putSubmodelElementByPath(
        requestParameters: PutSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void>;
}

/**
 *
 */
export class SubmodelAPIApi extends runtime.BaseAPI implements SubmodelAPIApiInterface {
    /**
     * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     */
    async deleteFileByPathRaw(
        requestParameters: DeleteFileByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling deleteFileByPath().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/attachment`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes file content of an existing submodel element at a specified path within submodel elements hierarchy
     */
    async deleteFileByPath(
        requestParameters: DeleteFileByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.deleteFileByPathRaw(requestParameters, initOverrides);
    }

    /**
     * Deletes a submodel element at a specified path within the submodel elements hierarchy
     */
    async deleteSubmodelElementByPathRaw(
        requestParameters: DeleteSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling deleteSubmodelElementByPath().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Deletes a submodel element at a specified path within the submodel elements hierarchy
     */
    async deleteSubmodelElementByPath(
        requestParameters: DeleteSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.deleteSubmodelElementByPathRaw(requestParameters, initOverrides);
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsRaw(
        requestParameters: GetAllSubmodelElementsRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsResult>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements including their hierarchy
     */
    async getAllSubmodelElements(
        requestParameters: GetAllSubmodelElementsRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsResult> {
        const response = await this.getAllSubmodelElementsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the metadata attributes of all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsMetadataRaw(
        requestParameters: GetAllSubmodelElementsMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsMetadataResult>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/$metadata`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the metadata attributes of all submodel elements including their hierarchy
     */
    async getAllSubmodelElementsMetadata(
        requestParameters: GetAllSubmodelElementsMetadataRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsMetadataResult> {
        const response = await this.getAllSubmodelElementsMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel elements including their hierarchy in the Path notation
     */
    async getAllSubmodelElementsPathRaw(
        requestParameters: GetAllSubmodelElementsPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetPathItemsResult>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/$path`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements including their hierarchy in the Path notation
     */
    async getAllSubmodelElementsPath(
        requestParameters: GetAllSubmodelElementsPathRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetPathItemsResult> {
        const response = await this.getAllSubmodelElementsPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the References of all submodel elements
     */
    async getAllSubmodelElementsReferenceRaw(
        requestParameters: GetAllSubmodelElementsReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetReferencesResult>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/$reference`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the References of all submodel elements
     */
    async getAllSubmodelElementsReference(
        requestParameters: GetAllSubmodelElementsReferenceRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetReferencesResult> {
        const response = await this.getAllSubmodelElementsReferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns all submodel elements including their hierarchy in the ValueOnly representation
     */
    async getAllSubmodelElementsValueOnlyRaw(
        requestParameters: GetAllSubmodelElementsValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<GetSubmodelElementsValueResult>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/$value`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns all submodel elements including their hierarchy in the ValueOnly representation
     */
    async getAllSubmodelElementsValueOnly(
        requestParameters: GetAllSubmodelElementsValueOnlyRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<GetSubmodelElementsValueResult> {
        const response = await this.getAllSubmodelElementsValueOnlyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Downloads file content from a specific submodel element from the Submodel at a specified path
     */
    async getFileByPathRaw(
        requestParameters: GetFileByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Blob>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getFileByPath().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/attachment`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.BlobApiResponse(response);
    }

    /**
     * Downloads file content from a specific submodel element from the Submodel at a specified path
     */
    async getFileByPath(
        requestParameters: GetFileByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Blob> {
        const response = await this.getFileByPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultRaw(
        requestParameters: GetOperationAsyncResultRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getOperationAsyncResult().',
            );
        }

        if (requestParameters['handleId'] == null) {
            throw new runtime.RequiredError(
                'handleId',
                'Required parameter "handleId" was null or undefined when calling getOperationAsyncResult().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/operation-results/{handleId}`
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath'])))
                    .replace(`{${'handleId'}}`, encodeURIComponent(String(requestParameters['handleId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResult(
        requestParameters: GetOperationAsyncResultRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResult> {
        const response = await this.getOperationAsyncResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the value of the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultValueOnlyRaw(
        requestParameters: GetOperationAsyncResultValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResultValueOnly>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getOperationAsyncResultValueOnly().',
            );
        }

        if (requestParameters['handleId'] == null) {
            throw new runtime.RequiredError(
                'handleId',
                'Required parameter "handleId" was null or undefined when calling getOperationAsyncResultValueOnly().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/operation-results/{handleId}/$value`
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath'])))
                    .replace(`{${'handleId'}}`, encodeURIComponent(String(requestParameters['handleId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the value of the Operation result of an asynchronous invoked Operation
     */
    async getOperationAsyncResultValueOnly(
        requestParameters: GetOperationAsyncResultValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResultValueOnly> {
        const response = await this.getOperationAsyncResultValueOnlyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Operation status of an asynchronous invoked Operation
     */
    async getOperationAsyncStatusRaw(
        requestParameters: GetOperationAsyncStatusRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<BaseOperationResult>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getOperationAsyncStatus().',
            );
        }

        if (requestParameters['handleId'] == null) {
            throw new runtime.RequiredError(
                'handleId',
                'Required parameter "handleId" was null or undefined when calling getOperationAsyncStatus().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/operation-status/{handleId}`
                    .replace(`{${'idShortPath'}}`, encodeURIComponent(String(requestParameters['idShortPath'])))
                    .replace(`{${'handleId'}}`, encodeURIComponent(String(requestParameters['handleId']))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Operation status of an asynchronous invoked Operation
     */
    async getOperationAsyncStatus(
        requestParameters: GetOperationAsyncStatusRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<BaseOperationResult> {
        const response = await this.getOperationAsyncStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Submodel
     */
    async getSubmodelRaw(
        requestParameters: GetSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Submodel>> {
        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Submodel
     */
    async getSubmodel(
        requestParameters: GetSubmodelRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Submodel> {
        const response = await this.getSubmodelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathRaw(
        requestParameters: GetSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPath().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPath(
        requestParameters: GetSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement> {
        const response = await this.getSubmodelElementByPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the matadata attributes of a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathMetadataRaw(
        requestParameters: GetSubmodelElementByPathMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElementMetadata>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathMetadata().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/$metadata`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the matadata attributes of a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathMetadata(
        requestParameters: GetSubmodelElementByPathMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElementMetadata> {
        const response = await this.getSubmodelElementByPathMetadataRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the Path notation
     */
    async getSubmodelElementByPathPathRaw(
        requestParameters: GetSubmodelElementByPathPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<string>>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathPath().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/$path`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the Path notation
     */
    async getSubmodelElementByPathPath(
        requestParameters: GetSubmodelElementByPathPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<string>> {
        const response = await this.getSubmodelElementByPathPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Referene of a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathReferenceRaw(
        requestParameters: GetSubmodelElementByPathReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathReference().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/$reference`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Referene of a specific submodel element from the Submodel at a specified path
     */
    async getSubmodelElementByPathReference(
        requestParameters: GetSubmodelElementByPathReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference> {
        const response = await this.getSubmodelElementByPathReferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     */
    async getSubmodelElementByPathValueOnlyRaw(
        requestParameters: GetSubmodelElementByPathValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElementValue>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling getSubmodelElementByPathValueOnly().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/$value`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns a specific submodel element from the Submodel at a specified path in the ValueOnly representation
     */
    async getSubmodelElementByPathValueOnly(
        requestParameters: GetSubmodelElementByPathValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElementValue> {
        const response = await this.getSubmodelElementByPathValueOnlyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the metadata attributes of a specific Submodel
     */
    async getSubmodelMetadataRaw(
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelMetadata>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/$metadata`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the metadata attributes of a specific Submodel
     */
    async getSubmodelMetadata(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SubmodelMetadata> {
        const response = await this.getSubmodelMetadataRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns the Submodel in the Path notation
     */
    async getSubmodelPathRaw(
        requestParameters: GetSubmodelPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/$path`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the Submodel in the Path notation
     */
    async getSubmodelPath(
        requestParameters: GetSubmodelPathRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Array<string>> {
        const response = await this.getSubmodelPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Reference of the Submodel
     */
    async getSubmodelReferenceRaw(
        requestParameters: GetSubmodelReferenceRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<Reference>> {
        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/$reference`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Returns the Reference of the Submodel
     */
    async getSubmodelReference(
        requestParameters: GetSubmodelReferenceRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<Reference> {
        const response = await this.getSubmodelReferenceRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the Submodel in the ValueOnly representation
     */
    async getSubmodelValueOnlyRaw(
        requestParameters: GetSubmodelValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        if (requestParameters['extent'] != null) {
            queryParameters['extent'] = requestParameters['extent'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request(
            {
                path: `/submodel/$value`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the Submodel in the ValueOnly representation
     */
    async getSubmodelValueOnly(
        requestParameters: GetSubmodelValueOnlyRequest = {},
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<object> {
        const response = await this.getSubmodelValueOnlyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationRaw(
        requestParameters: InvokeOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResult>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperation().',
            );
        }

        if (requestParameters['operationRequest'] == null) {
            throw new runtime.RequiredError(
                'operationRequest',
                'Required parameter "operationRequest" was null or undefined when calling invokeOperation().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/invoke`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['operationRequest'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperation(
        requestParameters: InvokeOperationRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResult> {
        const response = await this.invokeOperationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncRaw(
        requestParameters: InvokeOperationAsyncRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationAsync().',
            );
        }

        if (requestParameters['operationRequest'] == null) {
            throw new runtime.RequiredError(
                'operationRequest',
                'Required parameter "operationRequest" was null or undefined when calling invokeOperationAsync().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/invoke-async`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['operationRequest'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    async invokeOperationAsync(
        requestParameters: InvokeOperationAsyncRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.invokeOperationAsyncRaw(requestParameters, initOverrides);
    }

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncValueOnlyRaw(
        requestParameters: InvokeOperationAsyncValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationAsyncValueOnly().',
            );
        }

        if (requestParameters['operationRequestValueOnly'] == null) {
            throw new runtime.RequiredError(
                'operationRequestValueOnly',
                'Required parameter "operationRequestValueOnly" was null or undefined when calling invokeOperationAsyncValueOnly().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/invoke-async/$value`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['operationRequestValueOnly'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Asynchronously invokes an Operation at a specified path
     */
    async invokeOperationAsyncValueOnly(
        requestParameters: InvokeOperationAsyncValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.invokeOperationAsyncValueOnlyRaw(requestParameters, initOverrides);
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationSyncValueOnlyRaw(
        requestParameters: InvokeOperationSyncValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<OperationResultValueOnly>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling invokeOperationSyncValueOnly().',
            );
        }

        if (requestParameters['operationRequestValueOnly'] == null) {
            throw new runtime.RequiredError(
                'operationRequestValueOnly',
                'Required parameter "operationRequestValueOnly" was null or undefined when calling invokeOperationSyncValueOnly().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/invoke/$value`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['operationRequestValueOnly'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Synchronously invokes an Operation at a specified path
     */
    async invokeOperationSyncValueOnly(
        requestParameters: InvokeOperationSyncValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<OperationResultValueOnly> {
        const response = await this.invokeOperationSyncValueOnlyRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates the Submodel
     */
    async patchSubmodelRaw(
        requestParameters: PatchSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodel'] == null) {
            throw new runtime.RequiredError(
                'submodel',
                'Required parameter "submodel" was null or undefined when calling patchSubmodel().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel`,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodel'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the Submodel
     */
    async patchSubmodel(
        requestParameters: PatchSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelRaw(requestParameters, initOverrides);
    }

    /**
     * Updates an existing SubmodelElement
     */
    async patchSubmodelElementByPathRaw(
        requestParameters: PatchSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling patchSubmodelElementByPath().',
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling patchSubmodelElementByPath().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElement'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing SubmodelElement
     */
    async patchSubmodelElementByPath(
        requestParameters: PatchSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelElementByPathRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the metadata attributes an existing SubmodelElement
     */
    async patchSubmodelElementByPathMetadataRaw(
        requestParameters: PatchSubmodelElementByPathMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling patchSubmodelElementByPathMetadata().',
            );
        }

        if (requestParameters['getSubmodelElementsMetadataResult'] == null) {
            throw new runtime.RequiredError(
                'getSubmodelElementsMetadataResult',
                'Required parameter "getSubmodelElementsMetadataResult" was null or undefined when calling patchSubmodelElementByPathMetadata().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/$metadata`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['getSubmodelElementsMetadataResult'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the metadata attributes an existing SubmodelElement
     */
    async patchSubmodelElementByPathMetadata(
        requestParameters: PatchSubmodelElementByPathMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelElementByPathMetadataRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the value of an existing SubmodelElement
     */
    async patchSubmodelElementByPathValueOnlyRaw(
        requestParameters: PatchSubmodelElementByPathValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling patchSubmodelElementByPathValueOnly().',
            );
        }

        if (requestParameters['getSubmodelElementsValueResult'] == null) {
            throw new runtime.RequiredError(
                'getSubmodelElementsValueResult',
                'Required parameter "getSubmodelElementsValueResult" was null or undefined when calling patchSubmodelElementByPathValueOnly().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['cursor'] != null) {
            queryParameters['cursor'] = requestParameters['cursor'];
        }

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/$value`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['getSubmodelElementsValueResult'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the value of an existing SubmodelElement
     */
    async patchSubmodelElementByPathValueOnly(
        requestParameters: PatchSubmodelElementByPathValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelElementByPathValueOnlyRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the metadata attributes of the Submodel
     */
    async patchSubmodelMetadataRaw(
        requestParameters: PatchSubmodelMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodelMetadata'] == null) {
            throw new runtime.RequiredError(
                'submodelMetadata',
                'Required parameter "submodelMetadata" was null or undefined when calling patchSubmodelMetadata().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel/$metadata`,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelMetadata'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the metadata attributes of the Submodel
     */
    async patchSubmodelMetadata(
        requestParameters: PatchSubmodelMetadataRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelMetadataRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the values of the Submodel
     */
    async patchSubmodelValueOnlyRaw(
        requestParameters: PatchSubmodelValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling patchSubmodelValueOnly().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel/$value`,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['body'] as any,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the values of the Submodel
     */
    async patchSubmodelValueOnly(
        requestParameters: PatchSubmodelValueOnlyRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.patchSubmodelValueOnlyRaw(requestParameters, initOverrides);
    }

    /**
     * Creates a new submodel element
     */
    async postSubmodelElementRaw(
        requestParameters: PostSubmodelElementRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>> {
        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling postSubmodelElement().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel/submodel-elements`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElement'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new submodel element
     */
    async postSubmodelElement(
        requestParameters: PostSubmodelElementRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement> {
        const response = await this.postSubmodelElementRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a new submodel element at a specified path within submodel elements hierarchy
     */
    async postSubmodelElementByPathRaw(
        requestParameters: PostSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<SubmodelElement>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling postSubmodelElementByPath().',
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling postSubmodelElementByPath().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElement'],
            },
            initOverrides,
        );

        return new runtime.JSONApiResponse(response);
    }

    /**
     * Creates a new submodel element at a specified path within submodel elements hierarchy
     */
    async postSubmodelElementByPath(
        requestParameters: PostSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<SubmodelElement> {
        const response = await this.postSubmodelElementByPathRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putFileByPathRaw(
        requestParameters: PutFileByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling putFileByPath().',
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [{ contentType: 'multipart/form-data' }];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['fileName'] != null) {
            formParams.append('fileName', requestParameters['fileName'] as any);
        }

        if (requestParameters['file'] != null) {
            formParams.append('file', requestParameters['file'] as any);
        }

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}/attachment`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Uploads file content to an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putFileByPath(
        requestParameters: PutFileByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.putFileByPathRaw(requestParameters, initOverrides);
    }

    /**
     * Updates the Submodel
     */
    async putSubmodelRaw(
        requestParameters: PutSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['submodel'] == null) {
            throw new runtime.RequiredError(
                'submodel',
                'Required parameter "submodel" was null or undefined when calling putSubmodel().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodel'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates the Submodel
     */
    async putSubmodel(
        requestParameters: PutSubmodelRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.putSubmodelRaw(requestParameters, initOverrides);
    }

    /**
     * Updates an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putSubmodelElementByPathRaw(
        requestParameters: PutSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['idShortPath'] == null) {
            throw new runtime.RequiredError(
                'idShortPath',
                'Required parameter "idShortPath" was null or undefined when calling putSubmodelElementByPath().',
            );
        }

        if (requestParameters['submodelElement'] == null) {
            throw new runtime.RequiredError(
                'submodelElement',
                'Required parameter "submodelElement" was null or undefined when calling putSubmodelElementByPath().',
            );
        }

        const queryParameters: any = {};

        if (requestParameters['level'] != null) {
            queryParameters['level'] = requestParameters['level'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request(
            {
                path: `/submodel/submodel-elements/{idShortPath}`.replace(
                    `{${'idShortPath'}}`,
                    encodeURIComponent(String(requestParameters['idShortPath'])),
                ),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['submodelElement'],
            },
            initOverrides,
        );

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates an existing submodel element at a specified path within submodel elements hierarchy
     */
    async putSubmodelElementByPath(
        requestParameters: PutSubmodelElementByPathRequest,
        initOverrides?: RequestInit | runtime.InitOverrideFunction,
    ): Promise<void> {
        await this.putSubmodelElementByPathRaw(requestParameters, initOverrides);
    }
}

/**
 * @export
 */
export const GetAllSubmodelElementsLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetAllSubmodelElementsLevelEnum =
    (typeof GetAllSubmodelElementsLevelEnum)[keyof typeof GetAllSubmodelElementsLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetAllSubmodelElementsExtentEnum =
    (typeof GetAllSubmodelElementsExtentEnum)[keyof typeof GetAllSubmodelElementsExtentEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsPathLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetAllSubmodelElementsPathLevelEnum =
    (typeof GetAllSubmodelElementsPathLevelEnum)[keyof typeof GetAllSubmodelElementsPathLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsReferenceLevelEnum = {
    Core: 'core',
} as const;
export type GetAllSubmodelElementsReferenceLevelEnum =
    (typeof GetAllSubmodelElementsReferenceLevelEnum)[keyof typeof GetAllSubmodelElementsReferenceLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsValueOnlyLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetAllSubmodelElementsValueOnlyLevelEnum =
    (typeof GetAllSubmodelElementsValueOnlyLevelEnum)[keyof typeof GetAllSubmodelElementsValueOnlyLevelEnum];
/**
 * @export
 */
export const GetAllSubmodelElementsValueOnlyExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetAllSubmodelElementsValueOnlyExtentEnum =
    (typeof GetAllSubmodelElementsValueOnlyExtentEnum)[keyof typeof GetAllSubmodelElementsValueOnlyExtentEnum];
/**
 * @export
 */
export const GetSubmodelLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelLevelEnum = (typeof GetSubmodelLevelEnum)[keyof typeof GetSubmodelLevelEnum];
/**
 * @export
 */
export const GetSubmodelExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetSubmodelExtentEnum = (typeof GetSubmodelExtentEnum)[keyof typeof GetSubmodelExtentEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelElementByPathLevelEnum =
    (typeof GetSubmodelElementByPathLevelEnum)[keyof typeof GetSubmodelElementByPathLevelEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetSubmodelElementByPathExtentEnum =
    (typeof GetSubmodelElementByPathExtentEnum)[keyof typeof GetSubmodelElementByPathExtentEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathPathLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelElementByPathPathLevelEnum =
    (typeof GetSubmodelElementByPathPathLevelEnum)[keyof typeof GetSubmodelElementByPathPathLevelEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathValueOnlyLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelElementByPathValueOnlyLevelEnum =
    (typeof GetSubmodelElementByPathValueOnlyLevelEnum)[keyof typeof GetSubmodelElementByPathValueOnlyLevelEnum];
/**
 * @export
 */
export const GetSubmodelElementByPathValueOnlyExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetSubmodelElementByPathValueOnlyExtentEnum =
    (typeof GetSubmodelElementByPathValueOnlyExtentEnum)[keyof typeof GetSubmodelElementByPathValueOnlyExtentEnum];
/**
 * @export
 */
export const GetSubmodelPathLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelPathLevelEnum = (typeof GetSubmodelPathLevelEnum)[keyof typeof GetSubmodelPathLevelEnum];
/**
 * @export
 */
export const GetSubmodelReferenceLevelEnum = {
    Core: 'core',
} as const;
export type GetSubmodelReferenceLevelEnum =
    (typeof GetSubmodelReferenceLevelEnum)[keyof typeof GetSubmodelReferenceLevelEnum];
/**
 * @export
 */
export const GetSubmodelValueOnlyLevelEnum = {
    Deep: 'deep',
    Core: 'core',
} as const;
export type GetSubmodelValueOnlyLevelEnum =
    (typeof GetSubmodelValueOnlyLevelEnum)[keyof typeof GetSubmodelValueOnlyLevelEnum];
/**
 * @export
 */
export const GetSubmodelValueOnlyExtentEnum = {
    WithBlobValue: 'withBlobValue',
    WithoutBlobValue: 'withoutBlobValue',
} as const;
export type GetSubmodelValueOnlyExtentEnum =
    (typeof GetSubmodelValueOnlyExtentEnum)[keyof typeof GetSubmodelValueOnlyExtentEnum];
/**
 * @export
 */
export const PatchSubmodelLevelEnum = {
    Core: 'core',
} as const;
export type PatchSubmodelLevelEnum = (typeof PatchSubmodelLevelEnum)[keyof typeof PatchSubmodelLevelEnum];
/**
 * @export
 */
export const PatchSubmodelElementByPathLevelEnum = {
    Core: 'core',
} as const;
export type PatchSubmodelElementByPathLevelEnum =
    (typeof PatchSubmodelElementByPathLevelEnum)[keyof typeof PatchSubmodelElementByPathLevelEnum];
/**
 * @export
 */
export const PatchSubmodelElementByPathValueOnlyLevelEnum = {
    Core: 'core',
} as const;
export type PatchSubmodelElementByPathValueOnlyLevelEnum =
    (typeof PatchSubmodelElementByPathValueOnlyLevelEnum)[keyof typeof PatchSubmodelElementByPathValueOnlyLevelEnum];
/**
 * @export
 */
export const PatchSubmodelValueOnlyLevelEnum = {
    Core: 'core',
} as const;
export type PatchSubmodelValueOnlyLevelEnum =
    (typeof PatchSubmodelValueOnlyLevelEnum)[keyof typeof PatchSubmodelValueOnlyLevelEnum];
/**
 * @export
 */
export const PutSubmodelLevelEnum = {
    Deep: 'deep',
} as const;
export type PutSubmodelLevelEnum = (typeof PutSubmodelLevelEnum)[keyof typeof PutSubmodelLevelEnum];
/**
 * @export
 */
export const PutSubmodelElementByPathLevelEnum = {
    Deep: 'deep',
} as const;
export type PutSubmodelElementByPathLevelEnum =
    (typeof PutSubmodelElementByPathLevelEnum)[keyof typeof PutSubmodelElementByPathLevelEnum];
